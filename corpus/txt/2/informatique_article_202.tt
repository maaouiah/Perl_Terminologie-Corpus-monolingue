Inscrivez	VER:pres	inscrire
-vous	PRO:PER	vous
!	SENT	!
Menu	NOM	menu
Accueil	NAM	Accueil
Les	DET:ART	le
Sujets	NAM	Sujets
et	KON	et
Les	DET:ART	le
Articles	NOM	article
Informatique	NAM	Informatique
Programmation	NAM	Programmation
C#	ABR	C#
Sécurité	NAM	Sécurité
&	SYM	&
Hacking	NAM	Hacking
Astuces	NAM	Astuces
Windows	NAM	Windows
Divx	ABR	Divx
&	SYM	&
P2P	NAM	P2P
GSM	NAM	GSM
Cryptographie	NAM	Cryptographie
Webmaster	NAM	Webmaster
Cours	NAM	Cours
Delphi	NAM	Delphi
Programmation	NAM	Programmation
Hoax	NAM	Hoax
MSN	NAM	MSN
Divers	NAM	Divers
News	NAM	News
Jeux	NAM	Jeux
Video	NAM	Video
Android	NAM	Android
OS	NAM	OS
Excel	NAM	Excel
Communauté	NAM	Communauté
Forums	NAM	Forums
T'	NAM	T'
Chat	NAM	Chat
IRC	NAM	IRC
·	VER:futu	·
Proposer	VER:infi	proposer
un	DET:ART	un
article	NOM	article
·	ADJ	·
Messages	NAM	Messages
Privés	NAM	Privés
Downloads	NAM	Downloads
et	KON	et
Liens	NAM	Liens
Web	NAM	Web
Téléchargements	NAM	Téléchargements
Liens	NAM	Liens
Peer	NAM	Peer
To	NAM	To
Peer	NAM	Peer
Contenu	NAM	Contenu
Content	NAM	Content
Encyclopedie	NAM	Encyclopedie
Reviews	NAM	Reviews
Top	NAM	Top
10	NUM	@card@
FAQ	NAM	FAQ
Infos	NAM	Infos
Statistiques	NAM	Statistiques
Search	NAM	Search
Votre	NAM	Votre
Compte	NAM	Compte
Partenaires	NAM	Partenaires
Ogame	NAM	Ogame
Angry	NAM	Angry
Birds	NAM	Birds
Solution	NAM	Solution
Aide	NAM	Aide
Ogame	NAM	Ogame
Cours	NAM	Cours
Delphi	ABR	Delphi
2	NUM	@card@
:	PUN	:
Initiation	NOM	initiation
à	PRP	à
la	DET:ART	le
programmation	NOM	programmation
avec	PRP	avec
Delphi	NAM	Delphi
Delphi	NAM	Delphi
est	VER:pres	être
un	DET:ART	un
outil	NOM	outil
de	PRP	de
programmation	NOM	programmation
puissant	ADJ	puissant
et	KON	et
simple	ADJ	simple
à	PRP	à
utiliser	VER:infi	utiliser
pour	PRP	pour
créer	VER:infi	créer
des	PRP:det	du
applications	NOM	application
sous	PRP	sous
Windows	NAM	Windows
.	SENT	.
Nous	PRO:PER	nous
allons	VER:pres	aller
découvrir	VER:infi	découvrir
ensemble	ADV	ensemble
l'	DET:ART	le
environement	NOM	environement
de	PRP	de
Delphi2005	NAM	Delphi2005
,	PUN	,
l'	DET:ART	le
organisation	NOM	organisation
des	PRP:det	du
projets	NOM	projet
,	PUN	,
les	DET:ART	le
différents	ADJ	différent
fichiers	NOM	fichier
de	PRP	de
Delphi	NAM	Delphi
,	PUN	,
les	DET:ART	le
fonctions	NOM	fonction
,	PUN	,
les	DET:ART	le
procédures	NOM	procédure
ainsi	KON	ainsi
que	KON	que
les	DET:ART	le
bases	NOM	base
pour	PRP	pour
programmer	VER:infi	programmer
vos	DET:POS	votre
premières	NUM	premier
applications	NOM	application
.	SENT	.
Le	DET:ART	le
cours	NOM	cour|cours
sera	VER:futu	être
suivi	VER:pper	suivre
d'	PRP	de
exercices	NOM	exercice
corrigés	VER:pper	corriger
qui	PRO:REL	qui
vous	PRO:PER	vous
permetront	VER:futu	permetront
de	PRP	de
vous	PRO:PER	vous
exercer	VER:infi	exercer
et	KON	et
de	PRP	de
vous	PRO:PER	vous
perfecctionner	VER:infi	perfecctionner
.	SENT	.
Delphi	NAM	Delphi
est	VER:pres	être
un	DET:ART	un
environnement	NOM	environnement
de	PRP	de
développement	NOM	développement
intégré	VER:pper	intégrer
propriétaire	ADJ	propriétaire
(	PUN	(
IDE	NAM	IDE
)	PUN	)
pour	PRP	pour
le	DET:ART	le
langage	NOM	langage
Pascal	NAM	Pascal
sous	PRP	sous
Windows	NAM	Windows
.	SENT	.
Delphi	NAM	Delphi
implémente	VER:pres	implémente
une	DET:ART	un
version	NOM	version
orientée	VER:pper	orienter
objet	NOM	objet
du	PRP:det	du
langage	NOM	langage
Pascal	NAM	Pascal
.	SENT	.
L’environnement	NOM	L’environnement
de	PRP	de
développement	NOM	développement
s’appuie	VER:pper	s’appuie
sur	PRP	sur
un	DET:ART	un
éditeur	NOM	éditeur
d’interface	ADJ	d’interface
graphique	ADJ	graphique
associé	VER:pper	associer
à	PRP	à
un	DET:ART	un
éditeur	NOM	éditeur
de	PRP	de
code	NOM	code
source	NOM	source
.	SENT	.
Il	PRO:PER	il
doit	VER:pres	devoir
son	DET:POS	son
succès	NOM	succès
à	PRP	à
sa	DET:POS	son
facilité	NOM	facilité
d’utilisation	NOM	d’utilisation
pour	PRP	pour
développer	VER:infi	développer
des	PRP:det	du
applications	NOM	application
graphiques	ADJ	graphique
et/ou	NOM	et/ou
liées	VER:pper	lier
aux	PRP:det	au
bases	NOM	base
de	PRP	de
données	NOM	donnée
.	SENT	.
Un	DET:ART	un
projet	NOM	projet
Delphi	NAM	Delphi
est	VER:pres	être
constitué	VER:pper	constituer
d’unités	NOM	d’unités
(	PUN	(
units	NOM	units
)	PUN	)
correspondant	VER:ppre	correspondre
à	PRP	à
des	PRP:det	du
fichiers	NOM	fichier
sources	NOM	source
et	KON	et
des	PRP:det	du
fiches	NOM	fiche
(	PUN	(
forms	NOM	forms
)	PUN	)
qui	PRO:REL	qui
définissent	VER:pres	définir
les	DET:ART	le
interfaces	NOM	interface
graphiques	ADJ	graphique
.	SENT	.
Pour	PRP	pour
l'	DET:ART	le
instant	NOM	instant
nous	PRO:PER	nous
nous	PRO:PER	nous
contenterons	VER:futu	contenter
de	PRP	de
coder	VER:infi	coder
des	PRP:det	du
applications	NOM	application
consoles	NOM	console
et	KON	et
nous	PRO:PER	nous
verrons	VER:futu	voir
plus	ADV	plus
tard	ADV	tard
les	DET:ART	le
applications	NOM	application
graphiques	ADJ	graphique
.	SENT	.
Les	DET:ART	le
fichiers	NOM	fichier
de	PRP	de
Delphi	NAM	Delphi
Liste	ADJ	Liste
des	PRP:det	du
différents	ADJ	différent
fichiers	NOM	fichier
que	PRO:REL	que
vous	PRO:PER	vous
pourrez	VER:futu	pouvoir
être	VER:infi	être
amené	VER:pper	amener
à	PRP	à
modifier	VER:infi	modifier
ainsi	ADV	ainsi
que	KON	que
leur	DET:POS	leur
utilité	NOM	utilité
respective	ADJ	respectif
.	SENT	.
Extension	NOM	extension
du	PRP:det	du
fichier	NOM	fichier
Description	NAM	Description
.	SENT	.
DCR	NAM	DCR
Fichier	NAM	Fichier
projet	NOM	projet
.	SENT	.
DFM	NAM	DFM
Dessin	NAM	Dessin
de	PRP	de
la	DET:ART	le
fiche	NOM	fiche
(	PUN	(
form	NOM	form
)	PUN	)
contenant	VER:ppre	contenir
les	DET:ART	le
propriétés	NOM	propriété
des	PRP:det	du
composants	NOM	composant
graphiques	ADJ	graphique
.	SENT	.
DPR	NAM	DPR
Fichier	NAM	Fichier
projet	NOM	projet
,	PUN	,
c'	PRO:DEM	ce
est	VER:pres	être
le	DET:ART	le
coeur	NOM	cœur
de	PRP	de
votre	DET:POS	votre
application	NOM	application
,	PUN	,
il	PRO:PER	il
faudra	VER:futu	falloir
lier	VER:infi	lier
tout	PRO:IND	tout
vos	DET:POS	votre
différents	ADJ	différent
fichiers	NOM	fichier
contenant	VER:ppre	contenir
du	PRP:det	du
code	NOM	code
(	PUN	(
.	SENT	.
pas	ADV	pas
)	PUN	)
au	PRP:det	au
.	SENT	.
DPR	NOM	DPR
.	SENT	.
.	SENT	.
PAS	ADV	pas
Fichier	NAM	Fichier
source	NOM	source
contenant	VER:ppre	contenir
le	DET:ART	le
code	NOM	code
de	PRP	de
l'	DET:ART	le
application	NOM	application
.	SENT	.
BDSPROJ	ABR	BDSPROJ
Fichier	ABR	Fichier
projet	NOM	projet
associé	VER:pper	associer
au	PRP:det	au
.	SENT	.
DPR	NOM	DPR
.	SENT	.
RC	NAM	RC
Fichier	NAM	Fichier
de	PRP	de
ressources	NOM	ressource
Windows	NAM	Windows
Liste	NAM	Liste
des	PRP:det	du
fichiers	NOM	fichier
générés	VER:pper	générer
après	PRP	après
la	DET:ART	le
compilation	NOM	compilation
et	KON	et
qu'	KON	que
il	PRO:PER	il
n'	ADV	ne
est	VER:pres	être
pas	ADV	pas
nécessaire	ADJ	nécessaire
de	PRP	de
modifier	VER:infi	modifier
vous-même	NOM	vous-même
.	SENT	.
Extension	NOM	extension
du	PRP:det	du
fichier	NOM	fichier
Description	NAM	Description
.	SENT	.
BPG	NAM	BPG
Fichier	NAM	Fichier
d'	PRP	de
un	DET:ART	un
groupe	NOM	groupe
de	PRP	de
projet	NOM	projet
.	SENT	.
DCU	ADJ	DCU
Fichier	NOM	fichier
créé	VER:pper	créer
lors	ADV	lors
de	PRP	de
la	DET:ART	le
compilation	NOM	compilation
mais	KON	mais
pas	ADV	pas
indispensable	ADJ	indispensable
.	SENT	.
DPK	NAM	DPK
Fichier	NAM	Fichier
source	NOM	source
d'	PRP	de
un	DET:ART	un
paquet	NOM	paquet
.	SENT	.
DOF	NAM	DOF
Fichier	NAM	Fichier
d'	PRP	de
option	NOM	option
de	PRP	de
compilation	NOM	compilation
du	PRP:det	du
projet	NOM	projet
.	SENT	.
DSK	NAM	DSK
Préférence	NAM	Préférence
de	PRP	de
l'	DET:ART	le
IDE	NOM	ide
.	SENT	.
RES	NAM	RES
Fichier	NAM	Fichier
de	PRP	de
ressources	NOM	ressource
Windows	NAM	Windows
,	PUN	,
il	PRO:PER	il
peut	VER:pres	pouvoir
contenir	VER:infi	contenir
des	PRP:det	du
icônes	NOM	icône
,	PUN	,
des	PRP:det	du
bitmaps	NOM	bitmaps
,	PUN	,
des	PRP:det	du
sons	NOM	son
Je	PRO:PER	je
vais	VER:pres	aller
essayer	VER:infi	essayer|essayer
de	PRP	de
vous	PRO:PER	vous
apprendre	VER:infi	apprendre
à	PRP	à
coder	VER:infi	coder
proprement	ADV	proprement
donc	ADV	donc
à	PRP	à
partir	VER:infi	partir
de	PRP	de
maintenant	ADV	maintenant
,	PUN	,
il	PRO:PER	il
vous	PRO:PER	vous
que	PRO:REL	que
vous	PRO:PER	vous
souveniez	VER:impf	souvenir
qu'	KON	que
on	PRO:PER	on
code	VER:pres	coder
les	DET:ART	le
fonctions	NOM	fonction
et	KON	et
les	DET:ART	le
procédures	NOM	procédure
(	PUN	(
vous	PRO:PER	vous
comprendrez	VER:futu	comprendre
plus	ADV	plus
tard	ADV	tard
ce	PRO:DEM	ce
que	KON	que
c'	PRO:DEM	ce
est	VER:pres	être
exactement	ADV	exactement
)	PUN	)
dans	PRP	dans
des	PRP:det	du
fichiers	NOM	fichier
.	SENT	.
pas	ADV	pas
et	KON	et
qu'	KON	que
on	PRO:PER	on
les	PRO:PER	la|le
appelle	VER:pres	appeler
dans	PRP	dans
le	PRO:PER	le
.	SENT	.
dpr	NOM	dpr
.	SENT	.
Votre	DET:POS	votre
premier	NUM	premier
projet	NOM	projet
Pour	NOM	Pour
créer	VER:infi	créer
un	DET:ART	un
nouveau	ADJ	nouveau
projet	NOM	projet
Delphi	NAM	Delphi
(	PUN	(
.	SENT	.
dpr	NOM	dpr
)	PUN	)
rendez	VER:pres	rendre
dans	PRP	dans
Fichier	NAM	Fichier
>	ABR	>
Nouveau	NAM	Nouveau
>	ABR	>
Autres	NAM	Autres
>	ADJ	>
Projets	NOM	projet
Delphi	VER:subi	Delphi
>	NOM	>
Application	NAM	Application
console	VER:pres	consoler
Project1	NOM	Project1
.	SENT	.
dpr	NOM	dpr
program	NOM	program
Project1	NAM	Project1
;	PUN	;
{	NOM	{
$APPTYPE	ADJ	$APPTYPE
CONSOLE	ADJ	CONSOLE
}	NOM	}
uses	VER:pres	user
SysUtils	NAM	SysUtils
;	PUN	;
begin	NOM	begin
{	ADJ	{
TODO	NAM	TODO
-oUser	ADJ	-oUser
-cConsole	ADJ	-cConsole
Main	NOM	main
:	PUN	:
placez	VER:pres	placer
le	DET:ART	le
code	NOM	code
ici	ADV	ici
}	ADJ	}
end	NOM	end
.	SENT	.
Vous	PRO:PER	vous
devriez	VER:cond	devoir
avoir	VER:infi	avoir
un	DET:ART	un
code	NOM	code
ressemblant	VER:ppre	ressembler
à	PRP	à
celui	PRO:DEM	celui
ci-dessus	ADV	ci-dessus
.	SENT	.
La	DET:ART	le
première	NUM	premier
ligne	NOM	ligne
définit	VER:pres	définir
le	DET:ART	le
nom	NOM	nom
du	PRP:det	du
programme	NOM	programme
.	SENT	.
Vous	PRO:PER	vous
pouvez	VER:pres	pouvoir
changer	VER:infi	changer
le	DET:ART	le
Projet1	NOM	Projet1
en	PRP	en
Premierprojet	NOM	Premierprojet
et	KON	et
enregistrer	VER:infi	enregistrer
le	DET:ART	le
fichier	NOM	fichier
avec	PRP	avec
comme	ADV	comme
nom	NOM	nom
Premierprojet	NAM	Premierprojet
(	PUN	(
.	SENT	.
dpr	NOM	dpr
ou	KON	ou
.	SENT	.
bdsproj	NOM	bdsproj
)	PUN	)
.	SENT	.
uses	VER:pres	user
sert	VER:pres	servir
à	PRP	à
inclure	VER:infi	inclure
des	PRP:det	du
fichiers	NOM	fichier
de	PRP	de
fonctions	NOM	fonction
ou	KON	ou
de	PRP	de
procédure	NOM	procédure
,	PUN	,
souvent	ADV	souvent
des	PRP:det	du
.	SENT	.
pas	ADV	pas
.	SENT	.
SysUtils	NAM	SysUtils
contient	VER:pres	contenir
les	DET:ART	le
fonctions	NOM	fonction
et	KON	et
procédures	NOM	procédure
de	PRP	de
base	NOM	base
de	PRP	de
Delphi	NAM	Delphi
,	PUN	,
dont	PRO:REL	dont
les	DET:ART	le
procédures	NOM	procédure
d'	PRP	de
entrées	NOM	entrée
et	KON	et
de	PRP	de
sorties	NOM	sortie
.	SENT	.
Je	PRO:PER	je
vous	PRO:PER	vous
conseille	VER:pres	conseiller
de	PRP	de
l'	PRO:PER	la|le
inclure	VER:infi	inclure
dans	PRP	dans
tous	PRO:IND	tout
vos	DET:POS	votre
fichiers	NOM	fichier
.	SENT	.
{	NOM	{
TODO	NAM	TODO
-oUser	ADJ	-oUser
-cConsole	ADJ	-cConsole
Main	NOM	main
:	PUN	:
placez	VER:pres	placer
le	DET:ART	le
code	NOM	code
ici	ADV	ici
}	ADJ	}
peut	VER:pres	pouvoir
être	VER:infi	être
supprimé	VER:pper	supprimer
.	SENT	.
begin	NOM	begin
et	KON	et
end	NOM	end
.	SENT	.
définissent	VER:pres	définir
respectivement	ADV	respectivement
le	DET:ART	le
début	NOM	début
et	KON	et
la	DET:ART	le
fin	NOM	fin
de	PRP	de
votre	DET:POS	votre
code	NOM	code
à	PRP	à
proprement	ADV	proprement
parler	VER:infi	parler
.	SENT	.
Types	NOM	type
de	PRP	de
données	NOM	donnée
Les	DET:ART	le
variables	ADJ	variable
et	KON	et
leur	DET:POS	leur
type	NOM	type
doivent	VER:pres	devoir
être	VER:infi	être
déclarées	VER:pper	déclarer
avant	PRP	avant
d'	PRP	de
être	VER:infi	être
utilisées	VER:pper	utiliser
.	SENT	.
Le	DET:ART	le
type	NOM	type
d'	PRP	de
une	DET:ART	un
variable	ADJ	variable
doit	VER:pres	devoir
être	VER:infi	être
choisi	VER:pper	choisir
en	PRP	en
fonction	NOM	fonction
de	PRP	de
ce	PRO:DEM	ce
que	PRO:REL	que
contiendra	VER:futu	contenir
cette	PRO:DEM	ce
variable	ADJ	variable
.	SENT	.
integer	NOM	integer
:	PUN	:
ce	PRO:DEM	ce
sont	VER:pres	être
les	DET:ART	le
nombres	NOM	nombre
entiers	ADJ	entier
(	PUN	(
exemple	NOM	exemple
:	PUN	:
42	NUM	@card@
ou	KON	ou
-5	NUM	@card@
)	PUN	)
single	ADJ	single
ou	KON	ou
double	ADJ	double
:	PUN	:
sont	VER:pres	être
utilisés	VER:pper	utiliser
comme	ADV	comme
type	NOM	type
pour	PRP	pour
les	DET:ART	le
nombres	NOM	nombre
à	PRP	à
virgules	NOM	virgule
(	PUN	(
exemple	NOM	exemple
:	PUN	:
3.3	NUM	@card@
)	PUN	)
On	NAM	On
peut	VER:pres	pouvoir
appliquer	VER:infi	appliquer
des	PRP:det	du
opérations	NOM	opération
aux	PRP:det	au
variables	ADJ	variable
numériques	ADJ	numérique
:	PUN	:
+	SYM	+
:	PUN	:
addition	NOM	addition
-	PUN	-
:	PUN	:
soustraction	NOM	soustraction
*	ADJ	*
:	PUN	:
multiplication	NOM	multiplication
/	PUN	/
:	PUN	:
division	NOM	division
mod	ADJ	mod
:	PUN	:
modulo	PRP	modulo
(	PUN	(
ne	ADV	ne
peut	VER:pres	pouvoir
être	VER:infi	être
appliqué	VER:pper	appliquer
qu'	KON	que
aux	PRP:det	au
entiers	ADJ	entier
(	PUN	(
integer	VER:infi	integer
)	PUN	)
)	PUN	)
char	NOM	char
:	PUN	:
est	VER:pres	être
utilisé	VER:pper	utiliser
pour	PRP	pour
contenir	VER:infi	contenir
un	DET:ART	un
seul	ADJ	seul
caractère	NOM	caractère
(	PUN	(
exemple	NOM	exemple
:	PUN	:
m	VER:pper	m
)	PUN	)
string	NOM	string
:	PUN	:
est	VER:pres	être
utilisé	VER:pper	utiliser
pour	PRP	pour
contenir	VER:infi	contenir
des	PRP:det	du
chaînes	NOM	chaîne
de	PRP	de
caractères	NOM	caractère
,	PUN	,
des	PRP:det	du
phrases	NOM	phrase
(	PUN	(
exemple	NOM	exemple
:	PUN	:
Hello	INT	hello
world	NOM	world
)	PUN	)
Pour	NAM	Pour
concaténer	VER:infi	concaténer
(	PUN	(
assembler	VER:infi	assembler
)	PUN	)
2	NUM	@card@
chaînes	NOM	chaîne
de	PRP	de
caractères	NOM	caractère
on	PRO:PER	on
utilise	VER:pres	utiliser
l'	DET:ART	le
opérateur	NOM	opérateur
+	SYM	+
.	SENT	.
Exemple	NOM	exemple
:	PUN	:
'Hello	NOM	'Hello
'	PUN	'
+	SYM	+
'world	NOM	'world
'	PUN	'
équivaut	VER:pres	équivaloir
à	PRP	à
'Hello	ADJ	'Hello
world	NOM	world
'	PUN	'
boolean	ADJ	boolean
:	PUN	:
ce	PRO:DEM	ce
sont	VER:pres	être
sont	VER:pres	être
des	PRP:det	du
booléens	ADJ	booléen
.	SENT	.
Il	PRO:PER	il
y	PRO:PER	y
a	VER:pres	avoir
2	NUM	@card@
valeurs	NOM	valeur
booléennes	ADJ	booléen
True	NAM	True
et	KON	et
False	NAM	False
,	PUN	,
respectivement	ADV	respectivement
Vrai	NAM	Vrai
et	KON	et
Faux	NAM	Faux
.	SENT	.
Il	PRO:PER	il
existe	VER:pres	exister
beaucoup	ADV	beaucoup
d'	PRP	de
autres	ADJ	autre
types	NOM	type
mais	KON	mais
je	PRO:PER	je
vous	PRO:PER	vous
ai	VER:pres	avoir
présenté	VER:pper	présenter
les	DET:ART	le
plus	ADV	plus
utilisés	VER:pper	utiliser
.	SENT	.
Variables	ADJ	variable
,	PUN	,
Constantes	NAM	Constantes
et	KON	et
Paramètres	NAM	Paramètres
Un	VER:futu	Un
paramètre	NOM	paramètre
représente	VER:pres	représenter
les	DET:ART	le
informations	NOM	information
que	PRO:REL	que
l'	DET:ART	le
on	PRO:PER	on
peut	VER:pres	pouvoir
passer	VER:infi	passer
à	PRP	à
une	DET:ART	un
fonction	NOM	fonction
ou	KON	ou
à	PRP	à
une	DET:ART	un
procédure	NOM	procédure
.	SENT	.
Une	DET:ART	un
variable	ADJ	variable
est	VER:pres	être
une	DET:ART	un
donnée	NOM	donnée
déclarée	VER:pper	déclarer
à	PRP	à
l'	DET:ART	le
intérieur	NOM	intérieur
d'	PRP	de
une	DET:ART	un
fonction	NOM	fonction
,	PUN	,
et	KON	et
qui	PRO:REL	qui
n'	ADV	ne
est	VER:pres	être
accessible	ADJ	accessible
que	KON	que
dans	PRP	dans
celle	PRO:DEM	celui
-ci	ADV	-ci
.	SENT	.
C'	PRO:DEM	ce
est	VER:pres	être
une	DET:ART	un
donnée	NOM	donnée
locale	ADJ	local
,	PUN	,
vous	PRO:PER	vous
pouvez	VER:pres	pouvoir
la	PRO:PER	la
modifier	VER:infi	modifier
comme	ADV	comme
bon	ADJ	bon
vous	PRO:PER	vous
semble	VER:pres	sembler
.	SENT	.
Il	PRO:PER	il
existe	VER:pres	exister
également	ADV	également
des	PRP:det	du
variables	ADJ	variable
globales	ADJ	global
qui	PRO:REL	qui
sont	VER:pres	être
accessibles	ADJ	accessible
dans	PRP	dans
tout	PRO:IND	tout
le	DET:ART	le
dpr	NOM	dpr
et	KON	et
le	DET:ART	le
projet	NOM	projet
mais	KON	mais
il	PRO:PER	il
ne	ADV	ne
faut	VER:pres	falloir
les	PRO:PER	la|le
utiliser	VER:infi	utiliser
qu'	KON	que
exceptionellement	NOM	exceptionellement
.	SENT	.
Quand	KON	quand
on	PRO:PER	on
utilise	VER:pres	utiliser
une	DET:ART	un
variable	ADJ	variable
,	PUN	,
elle	PRO:PER	elle
doit	VER:pres	devoir
être	VER:infi	être
déclarée	VER:pper	déclarer
dans	PRP	dans
tous	PRO:IND	tout
les	DET:ART	le
fichiers	NOM	fichier
où	PRO:REL	où
elle	PRO:PER	elle
est	VER:pres	être
utilisée	VER:pper	utiliser
.	SENT	.
Seules	NOM	seul
les	DET:ART	le
variables	ADJ	variable
passées	NOM	passée
en	PRP	en
paramètre	NOM	paramètre
d'	PRP	de
une	DET:ART	un
fonction/procédure	NOM	fonction/procédure
n'	ADV	ne
ont	VER:pres	avoir
pas	ADV	pas
besoin	NOM	besoin
d'	PRP	de
être	VER:infi	être
déclarée	VER:pper	déclarer
dans	PRP	dans
la	DET:ART	le
fonction/procédure	NOM	fonction/procédure
ou	KON	ou
elles	PRO:PER	elle
sont	VER:pres	être
utilisées	VER:pper	utiliser
.	SENT	.
Pour	PRP	pour
déclarer	VER:infi	déclarer
une	DET:ART	un
variable	ADJ	variable
,	PUN	,
on	PRO:PER	on
utilise	VER:pres	utiliser
le	DET:ART	le
mot	NOM	mot
clé	NOM	clé
var	NOM	var
.	SENT	.
On	PRO:PER	on
peut	VER:pres	pouvoir
déclarer	VER:infi	déclarer
les	DET:ART	le
variables	ADJ	variable
dans	PRP	dans
le	PRO:PER	le
.	SENT	.
DPR	NAM	DPR
ou	KON	ou
dans	PRP	dans
les	DET:ART	le
fonctions/procédures	NOM	fonctions/procédures
de	PRP	de
vos	DET:POS	votre
fichiers	NOM	fichier
.	SENT	.
pas	ADV	pas
.	SENT	.
Déclarer	VER:infi	déclarer
une	DET:ART	un
variable	ADJ	variable
dans	PRP	dans
un	NUM	un
.	SENT	.
dpr	NOM	dpr
,	PUN	,
juste	ADJ	juste
après	KON	après
les	PRO:PER	la|le
uses	VER:pres	user
.	SENT	.
Premierprojet	NOM	Premierprojet
.	SENT	.
dpr	NOM	dpr
program	NOM	program
Premierprojet	NOM	Premierprojet
;	PUN	;
{	ADJ	{
$APPTYPE	NOM	$APPTYPE
CONSOLE	VER:pres	consoler
}	NOM	}
uses	VER:pres	user
SysUtils	NAM	SysUtils
;	PUN	;
var	NOM	var
nom_variable1	ADJ	nom_variable1
:	PUN	:
type_variable1	NOM	type_variable1
;	PUN	;
nom_variable2	NOM	nom_variable2
:	PUN	:
type_variable2	NOM	type_variable2
;	PUN	;
begin	NOM	begin
{	ADJ	{
TODO	NAM	TODO
-oUser	ADJ	-oUser
-cConsole	ADJ	-cConsole
Main	NOM	main
:	PUN	:
placez	VER:pres	placer
le	DET:ART	le
code	NOM	code
ici	ADV	ici
}	ADJ	}
end	NOM	end
.	SENT	.
La	DET:ART	le
déclaration	NOM	déclaration
des	PRP:det	du
variables	ADJ	variable
dans	PRP	dans
les	DET:ART	le
fichiers	NOM	fichier
.	SENT	.
pas	ADV	pas
peut	VER:pres	pouvoir
se	PRO:PER	se
faire	VER:infi	faire
de	PRP	de
2	NUM	@card@
façons	NOM	façon
(	PUN	(
vous	PRO:PER	vous
allez	VER:pres	aller
bientôt	ADV	bientôt
vous	PRO:PER	vous
en	PRO:PER	en
servir	VER:infi	servir
)	PUN	)
.	SENT	.
La	DET:ART	le
seule	ADJ	seul
chose	NOM	chose
qui	PRO:REL	qui
change	VER:pres	changer
par	PRP	par
rapport	NOM	rapport
à	PRP	à
la	DET:ART	le
déclaration	NOM	déclaration
dans	PRP	dans
le	PRO:PER	le
.	SENT	.
dpr	NOM	dpr
,	PUN	,
c'	PRO:DEM	ce
est	VER:pres	être
l'	DET:ART	le
emplacement	NOM	emplacement
où	PRO:REL	où
l'	DET:ART	le
on	PRO:PER	on
déclare	VER:pres	déclarer
les	DET:ART	le
variable	ADJ	variable
,	PUN	,
le	DET:ART	le
code	NOM	code
reste	VER:pres	rester
le	DET:ART	le
même	ADJ	même
.	SENT	.
Vous	PRO:PER	vous
pouvez	VER:pres	pouvoir
placer	VER:infi	placer
un	DET:ART	un
code	NOM	code
similaire	ADJ	similaire
à	PRP	à
celui	PRO:DEM	celui
ci-dessous	ADV	ci-dessous
après	PRP	après
interface	NOM	interface
dans	PRP	dans
votre	DET:POS	votre
.	SENT	.
pas	ADV	pas
(	PUN	(
ne	ADV	ne
le	PRO:PER	le
faites	VER:pres	faire
pas	ADV	pas
encore	ADV	encore
)	PUN	)
.	SENT	.
var	NOM	var
nom_variable1	ABR	nom_variable1
:	PUN	:
type_variable1	NOM	type_variable1
;	PUN	;
nom_variable2	NOM	nom_variable2
:	PUN	:
type_variable2	NOM	type_variable2
;	PUN	;
Mais	VER:impf	Mais
le	PRO:PER	le
mieux	ADV	mieux
est	VER:pres	être
de	PRP	de
déclarer	VER:infi	déclarer
les	DET:ART	le
variables	ADJ	variable
en	PRP	en
local	NOM	local
dans	PRP	dans
les	DET:ART	le
fonctions/procédures	NOM	fonctions/procédures
,	PUN	,
c'	PRO:DEM	ce
est	VER:pres	être
ce	PRO:DEM	ce
que	PRO:REL	que
nous	PRO:PER	nous
ferons	VER:futu	faire
dans	PRP	dans
le	DET:ART	le
reste	NOM	reste
du	PRP:det	du
cours	NOM	cour|cours
.	SENT	.
Souvenez	VER:pres	souvenir
-vous	PRO:PER	vous
qu'	PRO:REL	que
elles	PRO:PER	elle
doivent	VER:pres	devoir
être	VER:infi	être
déclarées	VER:pper	déclarer
entre	PRP	entre
la	DET:ART	le
ligne	NOM	ligne
de	PRP	de
déclaration	NOM	déclaration
de	PRP	de
la	DET:ART	le
fonction	NOM	fonction
et	KON	et
le	DET:ART	le
begin	NOM	begin
.	SENT	.
function	NOM	function
nom_fonction(nom_variable1	ABR	nom_fonction(nom_variable1
:	PUN	:
type_variable1	NOM	type_variable1
)	PUN	)
:	PUN	:
type_resultat	NOM	type_resultat
;	PUN	;
var	NOM	var
nom_variable2	ADJ	nom_variable2
:	PUN	:
type_variable2	NOM	type_variable2
;	PUN	;
nom_variable3	NOM	nom_variable3
:	PUN	:
type_variable3	NOM	type_variable3
;	PUN	;
begin	NOM	begin
//	ADJ	//
instructions	NOM	instruction
de	PRP	de
votre	DET:POS	votre
fonction	NOM	fonction
end	VER:futu	end
;	PUN	;
Les	DET:ART	le
variables	ADJ	variable
nom_variable2	NOM	nom_variable2
et	KON	et
nom_variable3	NOM	nom_variable3
ne	ADV	ne
seront	VER:futu	être
déclarées	VER:pper	déclarer
que	KON	que
dans	PRP	dans
la	DET:ART	le
fonction	NOM	fonction
nom_fonction	NOM	nom_fonction
.	SENT	.
Vous	PRO:PER	vous
remarquerez	VER:futu	remarquer
que	KON	que
je	PRO:PER	je
n'	ADV	ne
ai	VER:pres	avoir
pas	ADV	pas
déclaré	VER:pper	déclarer
nom_variable1	NOM	nom_variable1
dans	PRP	dans
les	DET:ART	le
var	NOM	var
,	PUN	,
simplement	ADV	simplement
parce	KON	parce
qu'	KON	que
elle	PRO:PER	elle
je	PRO:PER	je
la	PRO:PER	la
passe	VER:pres	passer
en	PRP	en
paramètre	NOM	paramètre
dans	PRP	dans
ma	DET:POS	mon
fonction	NOM	fonction
,	PUN	,
dans	PRP	dans
la	DET:ART	le
parenthèse	NOM	parenthèse
.	SENT	.
Une	DET:ART	un
constante	ADJ	constant
est	VER:pres	être
un	DET:ART	un
nom	NOM	nom
que	PRO:REL	que
vous	PRO:PER	vous
associez	VER:pres	associer
une	DET:ART	un
fois	NOM	foi|fois
pour	PRP	pour
toute	PRO:IND	tout
à	PRP	à
une	DET:ART	un
valeur	NOM	valeur
.	SENT	.
C'	PRO:DEM	ce
est	VER:pres	être
utile	ADJ	utile
quand	KON	quand
on	PRO:PER	on
n'	ADV	ne
a	VER:pres	avoir
pas	ADV	pas
envie	NOM	envie
de	PRP	de
changer	VER:infi	changer
une	DET:ART	un
donnée	NOM	donnée
100	NUM	@card@
fois	NOM	foi|fois
dans	PRP	dans
tout	PRO:IND	tout
un	DET:ART	un
fichier	NOM	fichier
,	PUN	,
on	PRO:PER	on
ne	ADV	ne
change	VER:pres	changer
que	KON	que
la	DET:ART	le
déclaration	NOM	déclaration
de	PRP	de
la	DET:ART	le
constante	NOM	constante
.	SENT	.
Par	PRP	par
convention	NOM	convention
les	DET:ART	le
noms	NOM	nom
de	PRP	de
constante	NOM	constante
s'	PRO:PER	se
écrivent	VER:pres	écrire
en	PRP	en
majuscule	NOM	majuscule
.	SENT	.
Leur	DET:POS	leur
déclaration	NOM	déclaration
se	PRO:PER	se
fait	VER:pres	faire
aux	PRP:det	au
mêmes	ADJ	même
endroits	NOM	endroit
que	KON	que
celle	PRO:DEM	celui
des	PRP:det	du
variables	ADJ	variable
,	PUN	,
la	DET:ART	le
seule	ADJ	seul
différence	NOM	différence
est	VER:pres	être
le	DET:ART	le
mot	NOM	mot
clé	NOM	clé
qui	PRO:REL	qui
est	VER:pres	être
const	NOM	const
et	KON	et
non	ADV	non
var	NOM	var
.	SENT	.
const	NOM	const
nom_constante1	ABR	nom_constante1
=	ABR	=
42	NUM	@card@
;	PUN	;
nom_constante2	NOM	nom_constante2
=	ADJ	=
'une	VER:subp	'une
phrase	NOM	phrase
ou	KON	ou
un	DET:ART	un
mot	NOM	mot
'	PUN	'
;	PUN	;
Les	DET:ART	le
entrées	NOM	entrée
et	KON	et
sorties	VER:pper	sortir
Les	DET:ART	le
entrées	NOM	entrée
et	KON	et
les	DET:ART	le
sorties	NOM	sortie
sont	VER:pres	être
des	PRP:det	du
procédures	NOM	procédure
qui	PRO:REL	qui
permettent	VER:pres	permettre
d'	PRP	de
afficher	VER:infi	afficher
ou	KON	ou
d'	PRP	de
entrer	VER:infi	entrer
des	PRP:det	du
données	NOM	donnée
dans	PRP	dans
la	DET:ART	le
console	NOM	console
.	SENT	.
write	NOM	write
permet	VER:pres	permettre
de	PRP	de
d'	PRP	de
afficher	VER:infi	afficher
une	DET:ART	un
phrase	NOM	phrase
ou	KON	ou
une	DET:ART	un
variable	ADJ	variable
.	SENT	.
write('Hello	ADJ	write('Hello
world	NOM	world
'	PUN	'
)	PUN	)
;	PUN	;
write(x	NOM	write(x
)	PUN	)
;	PUN	;
avec	PRP	avec
x	VER:infi	x
une	DET:ART	un
variable	ADJ	variable
read	NOM	read
permet	VER:pres	permettre
de	PRP	de
lire	VER:infi	lire
un	DET:ART	un
paramètre	NOM	paramètre
entré	VER:pper	entrer
par	PRP	par
l'	DET:ART	le
utilisateur	NOM	utilisateur
.	SENT	.
read(var1	NOM	read(var1
)	PUN	)
;	PUN	;
avec	PRP	avec
var1	NOM	var1
une	DET:ART	un
variable	ADJ	variable
writeln	NOM	writeln
et	KON	et
readln	NOM	readln
ont	VER:pres	avoir
la	DET:ART	le
même	ADJ	même
utilité	NOM	utilité
mais	KON	mais
elles	PRO:PER	elle
sautent	VER:pres	sauter
automatiquement	ADV	automatiquement
une	DET:ART	un
ligne	NOM	ligne
après	PRP	après
exécution	NOM	exécution
.	SENT	.
Fonctions	NOM	fonction
et	KON	et
procédures	NOM	procédure
Une	VER:subi	Une
fonction	NOM	fonction
est	VER:pres	être
un	DET:ART	un
bout	NOM	bout
de	PRP	de
code	NOM	code
qui	PRO:REL	qui
peut	VER:pres	pouvoir
prendre	VER:infi	prendre
des	PRP:det	du
paramètres	NOM	paramètre
,	PUN	,
effectue	VER:pres	effectuer
un	DET:ART	un
traitement	NOM	traitement
en	PRP	en
fonction	NOM	fonction
de	PRP	de
ceux	PRO:DEM	celui
-ci	ADV	-ci
et	KON	et
renvoie	VER:pres	renvoyer
un	DET:ART	un
résultat	NOM	résultat
grâce	NOM	grâce
à	PRP	à
un	DET:ART	un
result	NOM	result
.	SENT	.
Cela	PRO:DEM	cela
permet	VER:pres	permettre
d'	PRP	de
automatiser	VER:infi	automatiser
un	DET:ART	un
traitement	NOM	traitement
.	SENT	.
Une	DET:ART	un
fonction	NOM	fonction
renvoie	VER:pres	renvoyer
un	DET:ART	un
résultat	NOM	résultat
et	KON	et
un	DET:ART	un
seul	NOM	seul
,	PUN	,
mais	KON	mais
elle	PRO:PER	elle
peut	VER:pres	pouvoir
être	VER:infi	être
appelée	VER:pper	appeler
plusieurs	PRO:IND	plusieurs
fois	NOM	foi|fois
.	SENT	.
Comme	KON	comme
je	PRO:PER	je
vous	PRO:PER	vous
l'	PRO:PER	la|le
ai	VER:pres	avoir
déjà	ADV	déjà
dit	VER:pper	dire
on	PRO:PER	on
va	VER:pres	aller
coder	VER:infi	coder
les	DET:ART	le
fonctions	NOM	fonction
dans	PRP	dans
des	PRP:det	du
fichiers	NOM	fichier
.	SENT	.
pas	ADV	pas
et	KON	et
non	ADV	non
directement	ADV	directement
dans	PRP	dans
le	PRO:PER	le
.	SENT	.
dpr	NOM	dpr
,	PUN	,
on	PRO:PER	on
va	VER:pres	aller
donc	ADV	donc
créer	VER:infi	créer
un	DET:ART	un
fichier	NOM	fichier
.	SENT	.
pas	ADV	pas
:	PUN	:
Fichier	NOM	fichier
>	ADJ	>
Nouveau	NAM	Nouveau
>	ABR	>
Unité	NAM	Unité
Enregistrez	VER:pres	enregistrer
votre	DET:POS	votre
fichier	NOM	fichier
.	SENT	.
pas	ADV	pas
avec	ADV	avec
comme	ADV	comme
nom	NOM	nom
fichiersource1	NOM	fichiersource1
,	PUN	,
vous	PRO:PER	vous
devriez	VER:cond	devoir
obtenir	VER:infi	obtenir
un	DET:ART	un
fichier	NOM	fichier
comme	KON	comme
celui	PRO:DEM	celui
ci-dessous	ADV	ci-dessous
.	SENT	.
fichiersource1	NOM	fichiersource1
.	SENT	.
pas	ADV	pas
unit	VER:pres	unir
fichiersource1	NOM	fichiersource1
;	PUN	;
interface	NOM	interface
implementation	NOM	implementation
end	ADJ	end
.	SENT	.
Votre	DET:POS	votre
fichier	NOM	fichier
de	PRP	de
projet	NOM	projet
.	SENT	.
dpr	NOM	dpr
devrait	VER:cond	devoir
avoir	VER:infi	avoir
inclus	VER:pper	inclure
fichiersource1	NOM	fichiersource1
.	SENT	.
pas	ADV	pas
dans	PRP	dans
les	PRO:PER	la|le
uses	VER:pres	user
et	KON	et
vous	PRO:PER	vous
devriez	VER:cond	devoir
avoir	VER:infi	avoir
un	DET:ART	un
code	NOM	code
ressemblant	VER:ppre	ressembler
à	PRP	à
celui	PRO:DEM	celui
ci-dessous	ADV	ci-dessous
.	SENT	.
Premierprojet	NOM	Premierprojet
.	SENT	.
dpr	NOM	dpr
(	PUN	(
ou	KON	ou
.	SENT	.
bdsproj	NOM	bdsproj
)	PUN	)
program	NOM	program
Premierprojet	NAM	Premierprojet
;	PUN	;
{	NOM	{
$APPTYPE	ADJ	$APPTYPE
CONSOLE	ADJ	CONSOLE
}	NOM	}
uses	VER:pres	user
SysUtils	NAM	SysUtils
,	PUN	,
fichiersource1	NOM	fichiersource1
in	ADJ	in
'fichiersource1	ADJ	'fichiersource1
.	SENT	.
pas	ADV	pas
'	PUN	'
;	PUN	;
begin	NOM	begin
{	ADJ	{
TODO	NAM	TODO
-oUser	ADJ	-oUser
-cConsole	ADJ	-cConsole
Main	NOM	main
:	PUN	:
placez	VER:pres	placer
le	DET:ART	le
code	NOM	code
ici	ADV	ici
}	ADJ	}
end	NOM	end
.	SENT	.
Regardons	VER:pres	regarder
de	PRP	de
plus	ADV	plus
près	ADV	près
le	DET:ART	le
fichier	NOM	fichier
.	SENT	.
pas	ADV	pas
.	SENT	.
Pour	PRP	pour
déclarer	VER:infi	déclarer
une	DET:ART	un
fonction	NOM	fonction
ou	KON	ou
une	DET:ART	un
procédure	NOM	procédure
,	PUN	,
on	PRO:PER	on
doit	VER:pres	devoir
la	PRO:PER	la
déclarer	VER:infi	déclarer
dans	PRP	dans
la	DET:ART	le
partie	NOM	partie
interface	NOM	interface
et	KON	et
la	PRO:PER	la
coder	VER:infi	coder
dans	PRP	dans
la	DET:ART	le
partie	NOM	partie
implementation	NOM	implementation
entre	PRP	entre
des	PRP:det	du
balises	NOM	balise
begin	NOM	begin
et	KON	et
end	NOM	end
;	PUN	;
.	SENT	.
Attention	NOM	attention
:	PUN	:
il	PRO:PER	il
faut	VER:pres	falloir
conserver	VER:infi	conserver
le	DET:ART	le
end	NOM	end
.	SENT	.
à	PRP	à
la	DET:ART	le
fin	NOM	fin
du	PRP:det	du
code	NOM	code
.	SENT	.
fichiersource1	NOM	fichiersource1
.	SENT	.
pas	ADV	pas
unit	VER:pres	unir
fichiersource1	NOM	fichiersource1
;	PUN	;
interface	NOM	interface
function	NOM	function
nom_fonction(nom_variable	ADJ	nom_fonction(nom_variable
:	PUN	:
type_variable	ADJ	type_variable
;	PUN	;
nom_variable2	NOM	nom_variable2
:	PUN	:
type_variable2	NOM	type_variable2
)	PUN	)
:	PUN	:
type_resultat	NOM	type_resultat
;	PUN	;
implementation	NOM	implementation
function	NOM	function
nom_fonction(nom_variable	ADJ	nom_fonction(nom_variable
:	PUN	:
type_variable	ADJ	type_variable
;	PUN	;
nom_variable2	NOM	nom_variable2
:	PUN	:
type_variable2	NOM	type_variable2
)	PUN	)
:	PUN	:
type_resultat	NOM	type_resultat
;	PUN	;
begin	NOM	begin
result	ADJ	result
:	PUN	:
=	NOM	=
nom_variable	ADJ	nom_variable
*	ADJ	*
nom_variable2	NOM	nom_variable2
;	PUN	;
end	VER:pper	end
;	PUN	;
end	VER:pper	end
.	SENT	.
Essayez	VER:pres	essayer|essayer
de	PRP	de
mémoriser	VER:infi	mémoriser
au	PRP:det	au
fur	NOM	fur
et	KON	et
à	PRP	à
mesure	NOM	mesure
la	DET:ART	le
structure	NOM	structure
du	PRP:det	du
code	NOM	code
.	SENT	.
function	NOM	function
nom_fonction(nom_variable	ADJ	nom_fonction(nom_variable
:	PUN	:
type_variable	ADJ	type_variable
;	PUN	;
nom_variable2	NOM	nom_variable2
:	PUN	:
type_variable2	NOM	type_variable2
)	PUN	)
:	PUN	:
type_resultat	NOM	type_resultat
;	PUN	;
Cette	NAM	Cette
ligne	NOM	ligne
permet	VER:pres	permettre
de	PRP	de
déclarer	VER:infi	déclarer
la	DET:ART	le
fonction	NOM	fonction
.	SENT	.
nom_fonction	NOM	nom_fonction
c'	PRO:DEM	ce
est	VER:pres	être
le	DET:ART	le
nom	NOM	nom
de	PRP	de
la	DET:ART	le
fonction	NOM	fonction
,	PUN	,
choisissez	VER:pres	choisir
des	PRP:det	du
noms	NOM	nom
de	PRP	de
fonctions	NOM	fonction
clairs	ADJ	clair
et	KON	et
différents	ADJ	différent
du	PRP:det	du
nom	NOM	nom
du	PRP:det	du
fichier	NOM	fichier
qui	PRO:REL	qui
contient	VER:pres	contenir
ces	PRO:DEM	ce
fonctions	NOM	fonction
.	SENT	.
nom_variable	ADJ	nom_variable
:	PUN	:
type_variable	ADJ	type_variable
choisissez	VER:pres	choisir
également	ADV	également
des	PRP:det	du
noms	NOM	nom
de	PRP	de
variables	ADJ	variable
clairs	NOM	clair
.	SENT	.
Le	DET:ART	le
type	NOM	type
de	PRP	de
la	DET:ART	le
variable	ADJ	variable
dépend	VER:pres	dépendre
de	PRP	de
ce	PRO:DEM	ce
qu'	PRO:REL	que
elle	PRO:PER	elle
contient	VER:pres	contenir
,	PUN	,
on	PRO:PER	on
l'	PRO:PER	la|le
a	VER:pres	avoir
déjà	ADV	déjà
vu	VER:pper	voir
plus	ADV	plus
haut	ADV	haut
dans	PRP	dans
le	DET:ART	le
cours	NOM	cour|cours
(	PUN	(
ex	ADV	ex
:	PUN	:
integer	NOM	integer
,	PUN	,
string	NOM	string
etc.	ABR	etc.
)	PUN	)
.	SENT	.
Les	DET:ART	le
variables	ADJ	variable
qui	PRO:REL	qui
se	PRO:PER	se
trouvent	VER:pres	trouver
entre	PRP	entre
les	DET:ART	le
parenthèses	NOM	parenthèse
qui	PRO:REL	qui
suivent	VER:pres	suivre
le	DET:ART	le
nom	NOM	nom
de	PRP	de
la	DET:ART	le
fonction	NOM	fonction
sont	VER:pres	être
les	DET:ART	le
variables	ADJ	variable
passées	NOM	passée
en	PRP	en
paramètres	NOM	paramètre
.	SENT	.
On	PRO:PER	on
peut	VER:pres	pouvoir
mettre	VER:infi	mettre
autant	ADV	autant
de	PRP	de
paramètres	NOM	paramètre
que	PRO:REL	que
l'	PRO:PER	la|le
ont	VER:pres	avoir
veut	VER:pres	vouloir
,	PUN	,
il	PRO:PER	il
faut	VER:pres	falloir
juste	ADJ	juste
respecter	VER:infi	respecter
la	DET:ART	le
syntaxe	NOM	syntaxe
et	KON	et
séparer	VER:infi	séparer
par	PRP	par
un	DET:ART	un
point	NOM	point
virgule	VER:pres	virguler
(	PUN	(
;	PUN	;
)	PUN	)
les	DET:ART	le
différents	ADJ	différent
couples	NOM	couple
nom_variable	ADJ	nom_variable
:	PUN	:
type_variable	ADJ	type_variable
.	SENT	.
:	PUN	:
type_resultat	NOM	type_resultat
;	PUN	;
définit	VER:pres	définir
le	DET:ART	le
type	NOM	type
du	PRP:det	du
résultat	NOM	résultat
que	PRO:REL	que
renverra	VER:futu	renvoyer
la	DET:ART	le
fonction	NOM	fonction
result	ADJ	result
:	PUN	:
=	NOM	=
nom_variable	ADJ	nom_variable
*	ADJ	*
nom_variable2	NOM	nom_variable2
;	PUN	;
result	ADJ	result
est	VER:pres	être
spécifique	ADJ	spécifique
aux	PRP:det	au
fonctions	NOM	fonction
,	PUN	,
c'	PRO:DEM	ce
est	VER:pres	être
le	DET:ART	le
résultat	NOM	résultat
que	PRO:REL	que
renvoie	VER:pres	renvoyer
la	DET:ART	le
fonction	NOM	fonction
.	SENT	.
Dans	PRP	dans
notre	DET:POS	notre
cas	NOM	cas
la	DET:ART	le
fonction	NOM	fonction
renverra	VER:futu	renvoyer
le	DET:ART	le
résultat	NOM	résultat
de	PRP	de
la	DET:ART	le
multiplication	NOM	multiplication
des	PRP:det	du
2	NUM	@card@
variables	ADJ	variable
que	PRO:REL	que
nous	PRO:PER	nous
avons	VER:pres	avoir
passé	VER:pper	passer
en	PRP	en
paramètres	NOM	paramètre
.	SENT	.
On	PRO:PER	on
va	VER:pres	aller
donc	ADV	donc
donner	VER:infi	donner
aux	PRP:det	au
variables	ADJ	variable
des	PRP:det	du
noms	NOM	nom
plus	ADV	plus
clair	ADJ	clair
et	KON	et
leur	PRO:PER	lui
associer	VER:infi	associer
des	PRP:det	du
types	NOM	type
adaptés	VER:pper	adapter
.	SENT	.
Votre	DET:POS	votre
fichier	NOM	fichier
doit	VER:pres	devoir
maintenant	ADV	maintenant
ressembler	VER:infi	ressembler
à	PRP	à
cela	PRO:DEM	cela
:	PUN	:
fichiersource1	NOM	fichiersource1
.	SENT	.
pas	ADV	pas
unit	VER:pres	unir
fichiersource1	NOM	fichiersource1
;	PUN	;
interface	NOM	interface
function	NOM	function
multiplication(var1	ADJ	multiplication(var1
:	PUN	:
integer	NOM	integer
;	PUN	;
var2	NOM	var2
:	PUN	:
integer	VER:infi	integer
)	PUN	)
:	PUN	:
integer	NOM	integer
;	PUN	;
implementation	NOM	implementation
function	NOM	function
multiplication(var1	ADJ	multiplication(var1
:	PUN	:
integer	NOM	integer
;	PUN	;
var2	NOM	var2
:	PUN	:
integer	VER:infi	integer
)	PUN	)
:	PUN	:
integer	NOM	integer
;	PUN	;
begin	NOM	begin
result	ADJ	result
:	PUN	:
=	NOM	=
var1	ADJ	var1
*	ADJ	*
var2	NOM	var2
;	PUN	;
end	VER:pper	end
;	PUN	;
end	VER:pper	end
.	SENT	.
Nous	PRO:PER	nous
verrons	VER:futu	voir
dans	PRP	dans
la	DET:ART	le
suite	NOM	suite
du	PRP:det	du
cours	NOM	cour|cours
comment	ADV	comment
appeler	VER:infi	appeler
une	DET:ART	un
fonction	NOM	fonction
et	KON	et
afficher	VER:infi	afficher
le	DET:ART	le
résultat	NOM	résultat
.	SENT	.
Nous	PRO:PER	nous
nous	PRO:PER	nous
servirons	VER:futu	servir
également	ADV	également
de	PRP	de
cette	PRO:DEM	ce
fonction	NOM	fonction
dans	PRP	dans
la	DET:ART	le
suite	NOM	suite
du	PRP:det	du
cours	NOM	cour|cours
.	SENT	.
Une	DET:ART	un
procédure	NOM	procédure
peut	VER:pres	pouvoir
également	ADV	également
prendre	VER:infi	prendre
des	PRP:det	du
paramètres	NOM	paramètre
mais	KON	mais
elle	PRO:PER	elle
ne	ADV	ne
renvoie	VER:pres	renvoyer
aucun	PRO:IND	aucun
résultat	NOM	résultat
.	SENT	.
Cela	PRO:DEM	cela
signifie	VER:pres	signifier
pas	ADV	pas
qu'	KON	que
on	PRO:PER	on
ne	ADV	ne
peut	VER:pres	pouvoir
rien	ADV	rien
afficher	VER:infi	afficher
avec	ADV	avec
,	PUN	,
au	PRP:det	au
contraire	NOM	contraire
.	SENT	.
Nous	PRO:PER	nous
allons	VER:pres	aller
créer	VER:infi	créer
une	DET:ART	un
procédure	NOM	procédure
dans	PRP	dans
le	DET:ART	le
même	ADJ	même
fichier	NOM	fichier
.	SENT	.
fichiersource1	NOM	fichiersource1
.	SENT	.
pas	ADV	pas
unit	VER:pres	unir
fichiersource1	NOM	fichiersource1
;	PUN	;
interface	NOM	interface
function	NOM	function
multiplication(var1	ADJ	multiplication(var1
:	PUN	:
integer	NOM	integer
;	PUN	;
var2	NOM	var2
:	PUN	:
integer	VER:infi	integer
)	PUN	)
:	PUN	:
integer	NOM	integer
;	PUN	;
procedure	NOM	procedure
hello(nom1	ADJ	hello(nom1
:	PUN	:
string	NOM	string
)	PUN	)
;	PUN	;
implementation	NOM	implementation
function	NOM	function
multiplication(var1	ADJ	multiplication(var1
:	PUN	:
integer	NOM	integer
;	PUN	;
var2	NOM	var2
:	PUN	:
integer	VER:infi	integer
)	PUN	)
:	PUN	:
integer	NOM	integer
;	PUN	;
begin	NOM	begin
result	ADJ	result
:	PUN	:
=	NOM	=
var1	ADJ	var1
*	ADJ	*
var2	NOM	var2
;	PUN	;
end	VER:pper	end
;	PUN	;
procedure	NOM	procedure
hello(nom1	ADJ	hello(nom1
:	PUN	:
string	NOM	string
)	PUN	)
;	PUN	;
begin	NOM	begin
writeln('Bonjour	NOM	writeln('Bonjour
'	PUN	'
+	SYM	+
nom1	NOM	nom1
)	PUN	)
;	PUN	;
end	VER:pper	end
;	PUN	;
end	VER:pper	end
.	SENT	.
Vous	PRO:PER	vous
avez	VER:pres	avoir
vite	ADV	vite
dû	VER:pper	devoir
comprendre	VER:infi	comprendre
que	KON	que
la	DET:ART	le
procédure	NOM	procédure
hello	INT	hello
affichait	VER:impf	afficher
Bonjour	NOM	bonjour
suivi	VER:pper	suivre
de	PRP	de
la	DET:ART	le
variable	ADJ	variable
rentrée	NOM	rentrée
en	PRP	en
paramètre	NOM	paramètre
.	SENT	.
Comme	KON	comme
je	PRO:PER	je
l'	PRO:PER	la|le
ai	VER:pres	avoir
déjà	ADV	déjà
dit	VER:pper	dire
,	PUN	,
je	PRO:PER	je
vous	PRO:PER	vous
conseille	VER:pres	conseiller
de	PRP	de
coder	VER:infi	coder
vos	DET:POS	votre
fonctions	NOM	fonction
et	KON	et
vos	DET:POS	votre
procédures	NOM	procédure
dans	PRP	dans
un	DET:ART	un
fichier	NOM	fichier
.	SENT	.
pas	ADV	pas
que	KON	que
vous	PRO:PER	vous
inclurez	VER:futu	inclure
dans	PRP	dans
les	PRO:PER	la|le
uses	VER:pres	user
du	PRP:det	du
.	SENT	.
dpr	NOM	dpr
.	SENT	.
Votre	DET:POS	votre
premier	NUM	premier
programme	NOM	programme
On	NAM	On
va	VER:pres	aller
maintenant	ADV	maintenant
mettre	VER:infi	mettre
en	PRO:PER	en
pratique	VER:pres	pratiquer
toutes	PRO:IND	tout
ces	PRO:DEM	ce
informations	NOM	information
et	KON	et
utiliser	VER:infi	utiliser
les	DET:ART	le
fichiers	NOM	fichier
que	PRO:REL	que
nous	PRO:PER	nous
avons	VER:pres	avoir
crées	VER:pres	créer
jusqu'	PRP	jusque
a	VER:pres	avoir
présent	ADJ	présent
.	SENT	.
Mais	KON	mais
avant	PRP	avant
cela	PRO:DEM	cela
nous	PRO:PER	nous
allons	VER:pres	aller
voir	VER:infi	voir
quelques	PRO:IND	quelque
règles	NOM	règle|règles
de	PRP	de
base	NOM	base
de	PRP	de
la	DET:ART	le
syntaxe	NOM	syntaxe
Delphi	NAM	Delphi
.	SENT	.
-	PUN	-
chaque	PRO:IND	chaque
instruction	NOM	instruction
doit	VER:pres	devoir
être	VER:infi	être
suivie	VER:pper	suivre
d'	PRP	de
un	NUM	un
;	PUN	;
-	PUN	-
l'	DET:ART	le
opérateur	NOM	opérateur
d'	PRP	de
affectation	NOM	affectation
est	VER:pres	être
:	PUN	:
=	NOM	=
-	PUN	-
les	DET:ART	le
commentaires	NOM	commentaire
n'	ADV	ne
ont	VER:pres	avoir
aucune	PRO:IND	aucun
influence	NOM	influence
sur	PRP	sur
le	DET:ART	le
code	NOM	code
de	PRP	de
votre	DET:POS	votre
application	NOM	application
,	PUN	,
vous	PRO:PER	vous
pouvez	VER:pres	pouvoir
en	PRP	en
mettre	VER:infi	mettre
pour	PRP	pour
vous	PRO:PER	vous
aider	VER:infi	aider
quand	KON	quand
vous	PRO:PER	vous
relirez	VER:futu	relire
votre	DET:POS	votre
code	NOM	code
.	SENT	.
Pour	PRP	pour
insérer	VER:infi	insérer
des	PRP:det	du
commentaires	NOM	commentaire
dans	PRP	dans
le	DET:ART	le
code	NOM	code
source	NOM	source
,	PUN	,
on	PRO:PER	on
peut	VER:pres	pouvoir
utiliser	VER:infi	utiliser
trois	NUM	trois
techniques	NOM	technique
différentes	ADJ	différent
:	PUN	:
On	PRO:PER	on
peut	VER:pres	pouvoir
écrire	VER:infi	écrire
un	DET:ART	un
commentaire	NOM	commentaire
sur	PRP	sur
plusieurs	PRO:IND	plusieurs
lignes	NOM	ligne
en	PRP	en
plaçant	VER:ppre	placer
le	DET:ART	le
texte	NOM	texte
entre	PRP	entre
bornant	VER:ppre	borner
le	DET:ART	le
texte	NOM	texte
entre	PRP	entre
accolades	NOM	accolade
{	ADJ	{
}	ADJ	}
ou	KON	ou
entre	PRP	entre
une	DET:ART	un
paire	ADJ	pair
astérisques/parenthèses	NOM	astérisques/parenthèses
(	PUN	(
*	NOM	*
*	ADJ	*
)	PUN	)
.	SENT	.
Ou	KON	ou
on	PRO:PER	on
peut	VER:pres	pouvoir
écrire	VER:infi	écrire
un	DET:ART	un
commentaire	NOM	commentaire
d’une	VER:subp	d’une
ligne	NOM	ligne
en	PRP	en
la	DET:ART	le
commençant	NOM	commençant
par	PRP	par
deux	NUM	deux
barres	NOM	barre
obliques	ADJ	oblique
(	PUN	(
slash	NOM	slash
)	PUN	)
:	PUN	:
//	ADJ	//
.	SENT	.
Nous	PRO:PER	nous
avons	VER:pres	avoir
créé	VER:pper	créer
une	DET:ART	un
fonction	NOM	fonction
et	KON	et
une	DET:ART	un
procédure	NOM	procédure
dans	PRP	dans
fichiersource1	NOM	fichiersource1
.	SENT	.
pas	ADV	pas
,	PUN	,
nous	PRO:PER	nous
allons	VER:pres	aller
maintenant	ADV	maintenant
les	PRO:PER	la|le
utiliser	VER:infi	utiliser
dans	PRP	dans
notre	DET:POS	notre
fichier	NOM	fichier
projet	NOM	projet
(	PUN	(
.	SENT	.
dpr	NOM	dpr
ou	KON	ou
.	SENT	.
bdsproj	NOM	bdsproj
)	PUN	)
.	SENT	.
Premierprojet	NOM	Premierprojet
.	SENT	.
dpr	NOM	dpr
(	PUN	(
ou	KON	ou
.	SENT	.
bdsproj	NOM	bdsproj
)	PUN	)
program	NOM	program
Premierprojet	NAM	Premierprojet
;	PUN	;
{	NOM	{
$APPTYPE	ADJ	$APPTYPE
CONSOLE	ADJ	CONSOLE
}	NOM	}
uses	VER:pres	user
SysUtils	NAM	SysUtils
,	PUN	,
fichiersource1	NOM	fichiersource1
in	ADJ	in
'fichiersource1	ADJ	'fichiersource1
.	SENT	.
pas	ADV	pas
'	PUN	'
;	PUN	;
begin	NOM	begin
writeln(multiplication(3,5	ADJ	writeln(multiplication(3,5
)	PUN	)
)	PUN	)
;	PUN	;
readln	NOM	readln
;	PUN	;
end	VER:pper	end
.	SENT	.
Vous	PRO:PER	vous
vous	PRO:PER	vous
souvenez	VER:pres	souvenir
que	KON	que
l'	PRO:PER	la|le
on	PRO:PER	on
a	VER:pres	avoir
crée	VER:pres	créer
la	DET:ART	le
fonction	NOM	fonction
multiplication	NOM	multiplication
?	SENT	?
multiplication(3,5	NOM	multiplication(3,5
)	PUN	)
:	PUN	:
va	VER:pres	aller
donc	ADV	donc
appeler	VER:infi	appeler
la	DET:ART	le
fonction	NOM	fonction
multiplication	NOM	multiplication
crée	VER:pres	créer
dans	PRP	dans
fichiersource1	NOM	fichiersource1
.	SENT	.
pas	ADV	pas
avec	ADV	avec
en	PRP	en
paramètres	NOM	paramètre
3	NUM	@card@
et	KON	et
5	NUM	@card@
(	PUN	(
les	DET:ART	le
paramètres	NOM	paramètre
doivent	VER:pres	devoir
être	VER:infi	être
rangés	VER:pper	ranger
dans	PRP	dans
le	DET:ART	le
bon	ADJ	bon
ordre	NOM	ordre
mais	KON	mais
si	KON	si
ici	ADV	ici
cela	PRO:DEM	cela
n'	ADV	ne
a	VER:pres	avoir
pas	ADV	pas
d'	PRP	de
influence	NOM	influence
sur	PRP	sur
le	DET:ART	le
résultat	NOM	résultat
)	PUN	)
.	SENT	.
On	PRO:PER	on
utilise	VER:pres	utiliser
la	DET:ART	le
procedure	NOM	procedure
de	PRP	de
sortie	NOM	sortie
writeln	ADJ	writeln
pour	PRP	pour
afficher	VER:infi	afficher
le	DET:ART	le
résultat	NOM	résultat
de	PRP	de
multiplication(3,5	NOM	multiplication(3,5
)	PUN	)
dans	PRP	dans
la	DET:ART	le
console	NOM	console
.	SENT	.
multiplication(3,5	NOM	multiplication(3,5
)	PUN	)
va	VER:pres	aller
renvoyer	VER:infi	renvoyer
le	DET:ART	le
result	NOM	result
de	PRP	de
la	DET:ART	le
fonction	NOM	fonction
multiplication	NOM	multiplication
mais	KON	mais
on	PRO:PER	on
doit	VER:pres	devoir
l'	PRO:PER	la|le
afficher	VER:infi	afficher
c'	PRO:DEM	ce
est	VER:pres	être
pour	PRP	pour
cela	PRO:DEM	cela
qu'	PRO:REL	que
on	PRO:PER	on
utilise	VER:pres	utiliser
writeln	NOM	writeln
.	SENT	.
readln	NOM	readln
est	VER:pres	être
normalement	ADV	normalement
utilisée	VER:pper	utiliser
pour	PRP	pour
permettre	VER:infi	permettre
à	PRP	à
l'	DET:ART	le
utilisateur	NOM	utilisateur
d'	PRP	de
entrer	VER:infi	entrer
une	DET:ART	un
variable	ADJ	variable
mais	KON	mais
on	PRO:PER	on
l'	PRO:PER	la|le
utilise	VER:pres	utiliser
ici	ADV	ici
(	PUN	(
sans	PRP	sans
les	DET:ART	le
parenthèses	NOM	parenthèse
et	KON	et
le	DET:ART	le
nom	NOM	nom
d'	PRP	de
une	DET:ART	un
variable	ADJ	variable
)	PUN	)
pour	PRP	pour
empêcher	VER:infi	empêcher
l'	DET:ART	le
application	NOM	application
de	PRP	de
se	PRO:PER	se
fermer	VER:infi	fermer
jusqu'	PRP	jusque
a	VER:pres	avoir
ce	PRO:DEM	ce
que	PRO:REL	que
l'	DET:ART	le
utilisateur	NOM	utilisateur
appuie	VER:pres	appuyer
sur	PRP	sur
une	DET:ART	un
touche	NOM	touche
,	PUN	,
c'	PRO:DEM	ce
est	VER:pres	être
une	DET:ART	un
sorte	NOM	sorte
de	PRP	de
pause	NOM	pause
.	SENT	.
Exécuté	VER:pper	exécuter
ce	PRO:DEM	ce
code	VER:pres	coder
en	PRP	en
cliquant	VER:ppre	cliquer
sur	PRP	sur
la	DET:ART	le
flèche	NOM	flèche
verte	ADJ	vert
dans	PRP	dans
la	DET:ART	le
barre	NOM	barre
d'	PRP	de
outil	NOM	outil
ou	KON	ou
en	PRP	en
appuyant	VER:ppre	appuyer
sur	PRP	sur
F9	NAM	F9
,	PUN	,
une	DET:ART	un
console	NOM	console
s'	PRO:PER	se
ouvrira	VER:futu	ouvrir
et	KON	et
vous	PRO:PER	vous
verrai	VER:futu	voir
affiché	VER:pper	afficher
le	DET:ART	le
résultat	NOM	résultat
de	PRP	de
la	DET:ART	le
multiplication	NOM	multiplication
de	PRP	de
3	NUM	@card@
et	KON	et
5	NUM	@card@
,	PUN	,
c'	PRO:DEM	ce
est	VER:pres	être
à	PRP	à
dire	VER:infi	dire
15.	PRO:PER	@ord@
Essayez	VER:pres	essayer|essayer
d'	PRP	de
enlever	VER:infi	enlever
le	DET:ART	le
readln	NOM	readln
,	PUN	,
vous	PRO:PER	vous
constaterez	VER:futu	constater
que	KON	que
la	DET:ART	le
console	NOM	console
se	PRO:PER	se
ferme	VER:pres	fermer
automatiquement	ADV	automatiquement
.	SENT	.
Nous	PRO:PER	nous
avons	VER:pres	avoir
vu	VER:pper	voir
comment	ADV	comment
afficher	VER:infi	afficher
le	DET:ART	le
résultat	NOM	résultat
d'	PRP	de
une	DET:ART	un
fonction	NOM	fonction
grâce	NOM	grâce
a	VER:pres	avoir
la	DET:ART	le
fonction	NOM	fonction
write	ADJ	write
(	PUN	(
ou	KON	ou
writeln	NOM	writeln
)	PUN	)
,	PUN	,
nous	PRO:PER	nous
allons	VER:pres	aller
maintenant	ADV	maintenant
voir	VER:infi	voir
que	KON	que
la	DET:ART	le
fonction	NOM	fonction
write	ADJ	write
n'	ADV	ne
est	VER:pres	être
pas	ADV	pas
nécessaire	ADJ	nécessaire
dans	PRP	dans
le	DET:ART	le
cas	NOM	cas
d'	PRP	de
une	DET:ART	un
procédure	NOM	procédure
.	SENT	.
Contrairement	ADV	contrairement
à	PRP	à
la	DET:ART	le
fonction	NOM	fonction
,	PUN	,
la	DET:ART	le
procédure	NOM	procédure
renvoie	VER:pres	renvoyer
tout	PRO:IND	tout
ce	PRO:DEM	ce
qu'	PRO:REL	que
elle	PRO:PER	elle
a	VER:pres	avoir
fait	VER:pper	faire
,	PUN	,
c'	PRO:DEM	ce
est	VER:pres	être
comme	KON	comme
si	KON	si
l'	PRO:PER	la|le
on	PRO:PER	on
incluait	VER:impf	inclure
la	DET:ART	le
procédure	NOM	procédure
dans	PRP	dans
le	DET:ART	le
dpr	NOM	dpr
.	SENT	.
Le	DET:ART	le
writeln	NOM	writeln
qui	PRO:REL	qui
est	VER:pres	être
dans	PRP	dans
la	DET:ART	le
procedure	NOM	procedure
hello	INT	hello
va	VER:pres	aller
donc	ADV	donc
être	VER:infi	être
affiché	VER:pper	afficher
.	SENT	.
Ajoutons	VER:pres	ajouter
un	DET:ART	un
appel	NOM	appel
à	PRP	à
la	DET:ART	le
procédure	NOM	procédure
hello	INT	hello
avec	PRP	avec
en	PRP	en
paramètres	NOM	paramètre
une	DET:ART	un
chaîne	NOM	chaîne
de	PRP	de
caractère	NOM	caractère
(	PUN	(
=	ADJ	=
string	NOM	string
)	PUN	)
entre	PRP	entre
des	PRP:det	du
quotes	NOM	quotes
(	PUN	(
ex	ADV	ex
:	PUN	:
'	PUN	'
votre	DET:POS	votre
chaîne	NOM	chaîne
de	PRP	de
caractère	NOM	caractère
'	PUN	'
)	PUN	)
.	SENT	.
Premierprojet	NOM	Premierprojet
.	SENT	.
dpr	NOM	dpr
(	PUN	(
ou	KON	ou
.	SENT	.
bdsproj	NOM	bdsproj
)	PUN	)
program	NOM	program
Premierprojet	NAM	Premierprojet
;	PUN	;
{	NOM	{
$APPTYPE	ADJ	$APPTYPE
CONSOLE	ADJ	CONSOLE
}	NOM	}
uses	VER:pres	user
SysUtils	NAM	SysUtils
,	PUN	,
fichiersource1	NOM	fichiersource1
in	ADJ	in
'fichiersource1	ADJ	'fichiersource1
.	SENT	.
pas	ADV	pas
'	PUN	'
;	PUN	;
begin	NOM	begin
writeln(multiplication(3,5	ADJ	writeln(multiplication(3,5
)	PUN	)
)	PUN	)
;	PUN	;
readln	NOM	readln
;	PUN	;
hello('zmaster	NOM	hello('zmaster
'	PUN	'
)	PUN	)
;	PUN	;
readln	NOM	readln
;	PUN	;
end	VER:pper	end
.	SENT	.
Entraînez	VER:pres	entraîner
-vous	PRO:PER	vous
à	PRP	à
utiliser	VER:infi	utiliser
les	DET:ART	le
procédures	NOM	procédure
write	ADJ	write
et	KON	et
read	NOM	read
ainsi	KON	ainsi
qu'	PRO:REL	que
a	VER:pres	avoir
vous	PRO:PER	vous
servir	VER:infi	servir
des	PRP:det	du
fonctions	NOM	fonction
déclarées	VER:pper	déclarer
dans	PRP	dans
un	DET:ART	un
autre	ADJ	autre
fichier	NOM	fichier
.	SENT	.
On	PRO:PER	on
va	VER:pres	aller
améliorer	VER:infi	améliorer
un	DET:ART	un
peu	ADV	peu
notre	DET:POS	notre
programme	NOM	programme
pour	PRP	pour
le	PRO:PER	le
rendre	VER:infi	rendre
plus	ADV	plus
dynamique	ADJ	dynamique
et	KON	et
fonctionnel	ADJ	fonctionnel
.	SENT	.
On	PRO:PER	on
va	VER:pres	aller
faire	VER:infi	faire
en	PRP	en
sorte	NOM	sorte
que	KON	que
notre	DET:POS	notre
programme	NOM	programme
nous	PRO:PER	nous
demande	VER:pres	demander
notre	DET:POS	notre
prénom	NOM	prénom
et	KON	et
qu'	PRO:REL	que
il	PRO:PER	il
nous	PRO:PER	nous
dise	VER:subp	dire
Bonjour	NOM	bonjour
grâce	NOM	grâce
à	PRP	à
la	DET:ART	le
procedure	NOM	procedure
hello	INT	hello
et	KON	et
qu'	KON	que
il	PRO:PER	il
nous	PRO:PER	nous
demande	VER:pres	demander
ensuite	ADV	ensuite
les	DET:ART	le
2	NUM	@card@
chiffres	NOM	chiffre
qu'	PRO:REL	que
on	PRO:PER	on
veut	VER:pres	vouloir
multiplier	VER:infi	multiplier
avant	PRP	avant
d'	PRP	de
afficher	VER:infi	afficher
le	DET:ART	le
résultat	NOM	résultat
.	SENT	.
On	PRO:PER	on
va	VER:pres	aller
coder	VER:infi	coder
cette	PRO:DEM	ce
partie	NOM	partie
dans	PRP	dans
le	DET:ART	le
dpr	NOM	dpr
.	SENT	.
Comme	KON	comme
vous	PRO:PER	vous
avez	VER:pres	avoir
dû	VER:pper	devoir
le	PRO:PER	le
comprendre	VER:infi	comprendre
,	PUN	,
il	PRO:PER	il
va	VER:pres	aller
nous	PRO:PER	nous
falloir	VER:infi	falloir
3	NUM	@card@
variables	ADJ	variable
car	KON	car
on	PRO:PER	on
va	VER:pres	aller
entrer	VER:infi	entrer
dans	PRP	dans
le	DET:ART	le
programme	NOM	programme
notre	DET:POS	notre
prénom	NOM	prénom
(	PUN	(
type	NOM	type
string	NOM	string
)	PUN	)
et	KON	et
les	DET:ART	le
2	NUM	@card@
chiffres	NOM	chiffre
à	PRP	à
multiplier	VER:infi	multiplier
qui	PRO:REL	qui
seront	VER:futu	être
des	PRP:det	du
integer	NOM	integer
(	PUN	(
entiers	ADJ	entier
)	PUN	)
.	SENT	.
On	PRO:PER	on
commence	VER:pres	commencer
par	PRP	par
déclarer	VER:infi	déclarer
les	DET:ART	le
variables	ADJ	variable
,	PUN	,
ce	PRO:DEM	ce
qui	PRO:REL	qui
nous	PRO:PER	nous
donne	VER:pres	donner
:	PUN	:
Premierprojet	NOM	Premierprojet
.	SENT	.
dpr	NOM	dpr
(	PUN	(
ou	KON	ou
.	SENT	.
bdsproj	NOM	bdsproj
)	PUN	)
program	NOM	program
Premierprojet	NAM	Premierprojet
;	PUN	;
{	NOM	{
$APPTYPE	ADJ	$APPTYPE
CONSOLE	ADJ	CONSOLE
}	NOM	}
uses	VER:pres	user
SysUtils	NAM	SysUtils
,	PUN	,
fichiersource1	NOM	fichiersource1
in	ADJ	in
'fichiersource1	ADJ	'fichiersource1
.	SENT	.
pas	ADV	pas
'	PUN	'
;	PUN	;
var	NOM	var
mult1	ADJ	mult1
,	PUN	,
mult2	ADJ	mult2
:	PUN	:
integer	NOM	integer
;	PUN	;
prenom	NOM	prenom
:	PUN	:
string	NOM	string
;	PUN	;
begin	NOM	begin
writeln(multiplication(3,5	ADJ	writeln(multiplication(3,5
)	PUN	)
)	PUN	)
;	PUN	;
readln	NOM	readln
;	PUN	;
hello('zmaster	NOM	hello('zmaster
'	PUN	'
)	PUN	)
;	PUN	;
readln	NOM	readln
;	PUN	;
end	VER:pper	end
.	SENT	.
Quand	KON	quand
on	PRO:PER	on
définit	VER:pres	définir
plusieurs	PRO:IND	plusieurs
variables	ADJ	variable
du	PRP:det	du
même	ADJ	même
type	NOM	type
,	PUN	,
on	PRO:PER	on
peut	VER:pres	pouvoir
les	PRO:PER	la|le
déclarer	VER:infi	déclarer
sur	PRP	sur
la	DET:ART	le
même	ADJ	même
ligne	NOM	ligne
en	PRP	en
les	DET:ART	le
séparant	VER:ppre	séparer
par	PRP	par
des	PRP:det	du
virgules	NOM	virgule
.	SENT	.
On	PRO:PER	on
va	VER:pres	aller
maintenant	ADV	maintenant
demander	VER:infi	demander
rentrer	VER:infi	rentrer
les	DET:ART	le
instructions	NOM	instruction
qui	PRO:REL	qui
nous	PRO:PER	nous
permettront	VER:futu	permettre
d'	PRP	de
entrer	VER:infi	entrer
ces	PRO:DEM	ce
variables	ADJ	variable
.	SENT	.
Premierprojet	NOM	Premierprojet
.	SENT	.
dpr	NOM	dpr
(	PUN	(
ou	KON	ou
.	SENT	.
bdsproj	NOM	bdsproj
)	PUN	)
program	NOM	program
Premierprojet	NAM	Premierprojet
;	PUN	;
{	NOM	{
$APPTYPE	ADJ	$APPTYPE
CONSOLE	ADJ	CONSOLE
}	NOM	}
uses	VER:pres	user
SysUtils	NAM	SysUtils
,	PUN	,
fichiersource1	NOM	fichiersource1
in	ADJ	in
'fichiersource1	ADJ	'fichiersource1
.	SENT	.
pas	ADV	pas
'	PUN	'
;	PUN	;
var	NOM	var
mult1	ADJ	mult1
,	PUN	,
mult2	ADJ	mult2
:	PUN	:
integer	NOM	integer
;	PUN	;
prenom	NOM	prenom
:	PUN	:
string	NOM	string
;	PUN	;
begin	NOM	begin
readln(prenom	NOM	readln(prenom
)	PUN	)
;	PUN	;
//demande	VER:pres	//demande
le	DET:ART	le
prenom	NOM	prenom
hello(prenom	NOM	hello(prenom
)	PUN	)
;	PUN	;
(	PUN	(
*ecris	NOM	*ecris
Bonjour	NAM	Bonjour
suivit	VER:simp	suivre
du	PRP:det	du
prenom	NOM	prenom
*	ADJ	*
)	PUN	)
readln(mult1	NOM	readln(mult1
)	PUN	)
;	PUN	;
//demande	VER:pres	//demande
le	DET:ART	le
1er	NUM	1er
chiffre	NOM	chiffre
readln(mult2	NOM	readln(mult2
)	PUN	)
;	PUN	;
//demande	VER:pres	//demande
le	DET:ART	le
chiffre	NOM	chiffre
2	NUM	@card@
writeln(multiplication(mult1	NOM	writeln(multiplication(mult1
,	PUN	,
mult2	ADJ	mult2
)	PUN	)
)	PUN	)
;	PUN	;
(	PUN	(
*affiche	VER:pres	*affiche
la	DET:ART	le
multiplication	NOM	multiplication
de	PRP	de
mult1	NOM	mult1
et	KON	et
mult2	NOM	mult2
*	ADJ	*
)	PUN	)
readln	NOM	readln
;	PUN	;
//	ADJ	//
fais	VER:pres	faire
une	DET:ART	un
pause	NOM	pause
end	ADJ	end
.	SENT	.
Vous	PRO:PER	vous
pouvez	VER:pres	pouvoir
exécuter	VER:infi	exécuter
(	PUN	(
F9	ABR	F9
)	PUN	)
ce	PRO:DEM	ce
code	VER:pres	coder
pour	PRP	pour
voir	VER:infi	voir
.	SENT	.
Vous	PRO:PER	vous
devrez	VER:futu	devoir
entrer	VER:infi	entrer
votre	DET:POS	votre
prénom	NOM	prénom
puis	ADV	puis
appuyer	VER:infi	appuyer
sur	PRP	sur
Entrée	NAM	Entrée
>	VER:futu	>
le	DET:ART	le
programme	NOM	programme
renverra	VER:futu	renvoyer
Bonjour	NAM	Bonjour
suivit	VER:simp	suivre
de	PRP	de
votre	DET:POS	votre
prénom	NOM	prénom
>	ADJ	>
vous	PRO:PER	vous
devez	VER:pres	devoir
rentrer	VER:infi	rentrer
un	DET:ART	un
chiffre	NOM	chiffre
entier	ADJ	entier
qui	PRO:REL	qui
sera	VER:futu	être
affecté	VER:pper	affecter
a	VER:pres	avoir
mult1	NOM	mult1
puis	ADV	puis
appuyer	VER:infi	appuyer
sur	PRP	sur
Entrée	NOM	entrée
>	ADJ	>
rentrez	VER:pres	rentrer
alors	ADV	alors
un	DET:ART	un
autre	ADJ	autre
chiffre	NOM	chiffre
qui	PRO:REL	qui
sera	VER:futu	être
affecté	VER:pper	affecter
a	VER:pres	avoir
mult2	NOM	mult2
puis	ADV	puis
appuyez	VER:pres	appuyer
sur	PRP	sur
Entrée	NAM	Entrée
>	VER:futu	>
le	DET:ART	le
programme	NOM	programme
affichera	VER:futu	afficher
le	DET:ART	le
résultat	NOM	résultat
de	PRP	de
la	DET:ART	le
multiplication	NOM	multiplication
des	PRP:det	du
2	NUM	@card@
chiffres	NOM	chiffre
que	PRO:REL	que
vous	PRO:PER	vous
avez	VER:pres	avoir
entrés	VER:pper	entrer
>	NOM	>
pour	PRP	pour
quitter	VER:infi	quitter
appuyez	VER:pres	appuyer
sur	PRP	sur
n'	ADV	ne
importe	VER:pres	importer
quelle	PRO:REL	quel
touche	VER:pres	toucher
.	SENT	.
Vous	PRO:PER	vous
pouvez	VER:pres	pouvoir
améliorer	VER:infi	améliorer
un	DET:ART	un
peu	ADV	peu
votre	DET:POS	votre
programme	NOM	programme
pour	PRP	pour
le	PRO:PER	le
rendre	VER:infi	rendre
plus	ADV	plus
clair	ADJ	clair
.	SENT	.
Exemple	NOM	exemple
:	PUN	:
Premierprojet	NOM	Premierprojet
.	SENT	.
dpr	NOM	dpr
(	PUN	(
ou	KON	ou
.	SENT	.
bdsproj	NOM	bdsproj
)	PUN	)
program	NOM	program
Premierprojet	NAM	Premierprojet
;	PUN	;
{	NOM	{
$APPTYPE	ADJ	$APPTYPE
CONSOLE	ADJ	CONSOLE
}	NOM	}
uses	VER:pres	user
SysUtils	NAM	SysUtils
,	PUN	,
fichiersource1	NOM	fichiersource1
in	ADJ	in
'fichiersource1	ADJ	'fichiersource1
.	SENT	.
pas	ADV	pas
'	PUN	'
;	PUN	;
var	NOM	var
mult1	ADJ	mult1
,	PUN	,
mult2	ADJ	mult2
:	PUN	:
integer	NOM	integer
;	PUN	;
prenom	NOM	prenom
:	PUN	:
string	NOM	string
;	PUN	;
begin	NOM	begin
write('Entrez	VER:pres	write('Entrez
votre	DET:POS	votre
prenom	NOM	prenom
:	PUN	:
'	PUN	'
)	PUN	)
;	PUN	;
readln(prenom	NOM	readln(prenom
)	PUN	)
;	PUN	;
hello(prenom	NOM	hello(prenom
)	PUN	)
;	PUN	;
write('Entrez	VER:pres	write('Entrez
un	DET:ART	un
chiffre	NOM	chiffre
a	VER:pres	avoir
multiplier	VER:infi	multiplier
:	PUN	:
'	PUN	'
)	PUN	)
;	PUN	;
readln(mult1	NOM	readln(mult1
)	PUN	)
;	PUN	;
write('Entrez	VER:pres	write('Entrez
un	DET:ART	un
deuxieme	ADJ	deuxieme
chiffre	NOM	chiffre
a	VER:pres	avoir
multiplier	VER:infi	multiplier
:	PUN	:
'	PUN	'
)	PUN	)
;	PUN	;
readln(mult2	NOM	readln(mult2
)	PUN	)
;	PUN	;
writeln(IntToStr(mult1	ADJ	writeln(IntToStr(mult1
)	PUN	)
+	SYM	+
'	PUN	'
x	VER:pper	x
'	PUN	'
+	SYM	+
IntToStr(mult2	NAM	IntToStr(mult2
)	PUN	)
+	SYM	+
'	PUN	'
=	NOM	=
'	PUN	'
+	SYM	+
IntToStr(multiplication(mult1	NOM	IntToStr(multiplication(mult1
,	PUN	,
mult2	ADJ	mult2
)	PUN	)
)	PUN	)
)	PUN	)
;	PUN	;
readln	NOM	readln
;	PUN	;
end	VER:pper	end
.	SENT	.
Si	KON	si
vous	PRO:PER	vous
avez	VER:pres	avoir
bien	ADV	bien
suivis	VER:pper	suivre
le	DET:ART	le
cours	NOM	cour|cours
,	PUN	,
vous	PRO:PER	vous
devriez	VER:cond	devoir
comprendre	VER:infi	comprendre
toutes	PRO:IND	tout
les	DET:ART	le
lignes	NOM	ligne
sauf	ADJ	sauf
:	PUN	:
writeln(inttostr(mult1	ADJ	writeln(inttostr(mult1
)	PUN	)
+	SYM	+
'	PUN	'
x	VER:pper	x
'	PUN	'
+	SYM	+
inttostr(mult2	NOM	inttostr(mult2
)	PUN	)
+	SYM	+
'	PUN	'
=	NOM	=
'	PUN	'
+	SYM	+
inttostr(multiplication(mult1	NOM	inttostr(multiplication(mult1
,	PUN	,
mult2	ADJ	mult2
)	PUN	)
)	PUN	)
)	PUN	)
;	PUN	;
Je	PRO:PER	je
vais	VER:pres	aller
vous	PRO:PER	vous
expliquer	VER:infi	expliquer
l'	DET:ART	le
utilité	NOM	utilité
de	PRP	de
chaque	PRO:IND	chaque
élément	NOM	élément
de	PRP	de
cette	PRO:DEM	ce
ligne	NOM	ligne
.	SENT	.
Déjà	ADV	déjà
vous	PRO:PER	vous
avez	VER:pres	avoir
du	PRP:det	du
comprendre	VER:infi	comprendre
en	PRP	en
exécutant	VER:ppre	exécuter
le	DET:ART	le
programme	NOM	programme
que	KON	que
c'	PRO:DEM	ce
était	VER:impf	être
la	DET:ART	le
ligne	NOM	ligne
qui	PRO:REL	qui
afficher	VER:infi	afficher
:	PUN	:
mult1	ADJ	mult1
x	NOM	x
mult2	ADJ	mult2
=	ADJ	=
résultat	NOM	résultat
On	NAM	On
ne	ADV	ne
doit	VER:pres	devoir
pas	ADV	pas
mélanger	VER:infi	mélanger
des	PRP:det	du
variables	ADJ	variable
de	PRP	de
types	NOM	type
différents	ADJ	différent
dans	PRP	dans
un	DET:ART	un
writeln	NOM	writeln
or	KON	or
on	PRO:PER	on
essaie	VER:pres	essayer
d'	PRP	de
afficher	VER:infi	afficher
des	PRP:det	du
chaînes	NOM	chaîne
de	PRP	de
caractères	NOM	caractère
(	PUN	(
string	NOM	string
)	PUN	)
:	PUN	:
'	PUN	'
x	VER:pper	x
'	PUN	'
,	PUN	,
'	PUN	'
=	NOM	=
'	PUN	'
et	KON	et
ainsi	ADV	ainsi
que	KON	que
des	PRP:det	du
integer	NOM	integer
:	PUN	:
mult1	ADJ	mult1
,	PUN	,
mult2	ADJ	mult2
et	KON	et
le	DET:ART	le
résultat	NOM	résultat
de	PRP	de
la	DET:ART	le
multiplication	NOM	multiplication
.	SENT	.
Pour	PRP	pour
afficher	VER:infi	afficher
différents	ADJ	différent
types	NOM	type
de	PRP	de
données	NOM	donnée
dans	PRP	dans
un	DET:ART	un
write/writeln	NOM	write/writeln
,	PUN	,
il	PRO:PER	il
faut	VER:pres	falloir
convertir	VER:infi	convertir
ces	PRO:DEM	ce
données	NOM	donnée
.	SENT	.
IntToStr(	NOM	IntToStr(
)	PUN	)
sert	VER:pres	servir
a	VER:pres	avoir
convertir	VER:infi	convertir
des	PRP:det	du
integer	NOM	integer
en	PRP	en
string	NOM	string
(	PUN	(
d'	PRP	de
ou	KON	ou
son	DET:POS	son
nom	NOM	nom
)	PUN	)
,	PUN	,
on	PRO:PER	on
s'	PRO:PER	se
en	PRO:PER	en
sert	VER:pres	servir
ici	ADV	ici
pour	PRP	pour
pourvoir	NOM	pourvoir
afficher	VER:infi	afficher
les	DET:ART	le
integer	NOM	integer
avec	PRP	avec
le	DET:ART	le
reste	NOM	reste
.	SENT	.
Les	DET:ART	le
+	SYM	+
qui	PRO:REL	qui
sépare	VER:pres	séparer
chaque	PRO:IND	chaque
partie	NOM	partie
dans	PRP	dans
le	DET:ART	le
writeln	NOM	writeln
servent	VER:pres	servir
a	VER:pres	avoir
concaténer	VER:infi	concaténer
(	PUN	(
assembler	VER:infi	assembler
)	PUN	)
les	DET:ART	le
différentes	ADJ	différent
parties	NOM	partie
.	SENT	.
C'	PRO:DEM	ce
est	VER:pres	être
la	DET:ART	le
fin	NOM	fin
de	PRP	de
ce	PRO:DEM	ce
2éme	ADJ	2éme
cours	NOM	cour|cours
Delphi	NAM	Delphi
.	SENT	.
C'	PRO:DEM	ce
est	VER:pres	être
assez	ADV	assez
dur	ADJ	dur
d'	PRP	de
expliquer	VER:infi	expliquer
les	DET:ART	le
bases	NOM	base
de	PRP	de
la	DET:ART	le
programmation	NOM	programmation
mais	KON	mais
une	DET:ART	un
fois	NOM	foi|fois
que	PRO:REL	que
vous	PRO:PER	vous
avez	VER:pres	avoir
compris	VER:pper	comprendre
,	PUN	,
ça	PRO:DEM	cela
devient	VER:pres	devenir
très	ADV	très
facile	ADJ	facile
.	SENT	.
Dans	PRP	dans
le	DET:ART	le
prochains	ADJ	prochain
cours	NOM	cour|cours
,	PUN	,
vous	PRO:PER	vous
apprendrez	VER:futu	apprendre
les	DET:ART	le
conditions	NOM	condition
,	PUN	,
cela	PRO:DEM	cela
fait	VER:pres	faire
toujours	ADV	toujours
partie	VER:pper	partir
des	PRP:det	du
bases	NOM	base
,	PUN	,
c'	PRO:DEM	ce
est	VER:pres	être
ce	PRO:DEM	ce
qui	PRO:REL	qui
permet	VER:pres	permettre
de	PRP	de
dire	VER:infi	dire
a	VER:pres	avoir
un	DET:ART	un
programme	NOM	programme
:	PUN	:
si	KON	si
condition	NOM	condition
alors	ADV	alors
faire	VER:infi	faire
instructions	NOM	instruction
sinon	KON	sinon
faire	VER:infi	faire
autres	ADJ	autre
instructions	NOM	instruction
.	SENT	.
Vous	PRO:PER	vous
pouvez	VER:pres	pouvoir
maintenant	ADV	maintenant
passer	VER:infi	passer
aux	PRP:det	au
exercices	NOM	exercice
du	PRP:det	du
cours	NOM	cour|cours
2	NUM	@card@
:	PUN	:
Exercices	NOM	exercice
Delphi	NAM	Delphi
2	NUM	@card@
:	PUN	:
Entrainement	NOM	entrainement
Variables	NAM	Variables
,	PUN	,
Fonctions	NAM	Fonctions
et	KON	et
Affichage	NAM	Affichage
(	PUN	(
en	PRP	en
cours	NOM	cour|cours
de	PRP	de
réalisation	NOM	réalisation
)	PUN	)
Si	NAM	Si
vous	PRO:PER	vous
avez	VER:pres	avoir
besoin	NOM	besoin
d'	PRP	de
aide	NOM	aide
,	PUN	,
il	PRO:PER	il
y	PRO:PER	y
a	VER:pres	avoir
la	DET:ART	le
partie	NOM	partie
programmation	NOM	programmation
du	PRP:det	du
forum	NOM	forum
:	PUN	:
Forum	NAM	Forum
Programmation	NAM	Programmation
Les	DET:ART	le
autres	ADJ	autre
cours	NOM	cour|cours
Delphi	VER:pper	Delphi
de	PRP	de
www	NOM	www
.	SENT	.
zmaster	NOM	zmaster
.	SENT	.
fr	NOM	fr
:	PUN	:
Cours	NOM	cour|cours
Delphi	NAM	Delphi
1	NUM	@card@
:	PUN	:
Télécharger	NAM	Télécharger
et	KON	et
installer	VER:infi	installer
Delphi	VER:pper	Delphi
2005	NUM	@card@
gratuitement	ADV	gratuitement
Cours	NAM	Cours
Delphi	ABR	Delphi
2	NUM	@card@
:	PUN	:
Initiation	NOM	initiation
à	PRP	à
la	DET:ART	le
programmation	NOM	programmation
avec	PRP	avec
Delphi	NAM	Delphi
Cours	NAM	Cours
Delphi	ABR	Delphi
3	NUM	@card@
:	PUN	:
Les	DET:ART	le
conditions	NOM	condition
(	PUN	(
if	NOM	if
then	VER:futu	then
else	NOM	else
)	PUN	)
(	PUN	(
en	PRP	en
cours	NOM	cour|cours
de	PRP	de
réalisation	NOM	réalisation
)	PUN	)
Posté	VER:pper	poster
le	DET:ART	le
Samedi	NOM	samedi
27	NUM	@card@
janvier	NOM	janvier
2007	NUM	@card@
à	PRP	à
16:22:06	NUM	@card@
par	PRP	par
zmaster	NOM	zmaster
"	PUN:cit	"
Cours	NAM	Cours
Delphi	NAM	Delphi
2	NUM	@card@
:	PUN	:
Initiation	NOM	initiation
à	PRP	à
la	DET:ART	le
programmation	NOM	programmation
avec	PRP	avec
Delphi	NAM	Delphi
"	PUN:cit	"
|	NOM	|
Connexion/Créer	NAM	Connexion/Créer
un	DET:ART	un
compte	NOM	compte
|	ADJ	|
8	NUM	@card@
commentaires	NOM	commentaire
|	ADJ	|
Rechercher	NAM	Rechercher
Discussion	NAM	Discussion
Les	DET:ART	le
commentaires	NOM	commentaire
sont	VER:pres	être
la	DET:ART	le
propriété	NOM	propriété
de	PRP	de
leurs	DET:POS	leur
auteurs	NOM	auteur
.	SENT	.
Nous	PRO:PER	nous
ne	ADV	ne
sommes	VER:pres	sommer|être
pas	ADV	pas
responsables	ADJ	responsable
de	PRP	de
leurs	DET:POS	leur
contenus	NOM	contenu
!	SENT	!
Les	DET:ART	le
commentaires	NOM	commentaire
anonymes	ADJ	anonyme
ne	ADV	ne
sont	VER:pres	être
pas	ADV	pas
autorisés	VER:pper	autoriser
,	PUN	,
veuillez	VER:pres	veuillez
vous	PRO:PER	vous
enregistrer	VER:infi	enregistrer
Re	NOM	Re
:	PUN	:
Cours	NOM	cour|cours
Delphi	NAM	Delphi
2	NUM	@card@
:	PUN	:
Initiation	NOM	initiation
à	PRP	à
la	DET:ART	le
programmation	NOM	programmation
avec	PRP	avec
Delphi	NAM	Delphi
(	PUN	(
Score	NAM	Score
:	PUN	:
0)par	NOM	0)par
Anonyme	NAM	Anonyme
le	DET:ART	le
Lundi	NAM	Lundi
05	NUM	@card@
février	NOM	février
2007	NUM	@card@
à	PRP	à
14:26:08	NUM	@card@
Delphi	NAM	Delphi
est	VER:pres	être
-il	PRO:PER	il
compatible	ADJ	compatible
Excel-Word	NAM	Excel-Word
?	SENT	?
Êtes	VER:pres	être
-vous	PRO:PER	vous
prêts	ADJ	prêt
à	PRP	à
perdre	VER:infi	perdre
vos	DET:POS	votre
nerfs	NOM	nerf
avec	PRP	avec
un	DET:ART	un
gros	ADJ	gros
NUL	NOM	NUL
en	PRP	en
programmation	NOM	programmation
?	SENT	?
J'	PRO:PER	je
'ai	VER:simp	'ai
tâté	VER:pper	tâter
C++	NAM	C++
pour	PRP	pour
les	DET:ART	le
NULS	NOM	NULS
,	PUN	,
j'	PRO:PER	je
'ai	VER:simp	'ai
rien	ADV	rien
compris	VER:pper	comprendre
!	SENT	!
!	SENT	!
!	SENT	!
Pourtant	ADV	pourtant
qu'	KON	que
'est	NOM	'est
ce	PRO:DEM	ce
que	PRO:REL	que
j'	PRO:PER	je
'aimerais	VER:cond	'aimerais
...	PUN	...
.	SENT	.
Re	NAM	Re
:	PUN	:
Cours	NOM	cour|cours
Delphi	NAM	Delphi
2	NUM	@card@
:	PUN	:
Initiation	NOM	initiation
à	PRP	à
la	DET:ART	le
programmation	NOM	programmation
avec	PRP	avec
Delphi	NAM	Delphi
(	PUN	(
Score	NAM	Score
:	PUN	:
0)par	NOM	0)par
Anonyme	NAM	Anonyme
le	DET:ART	le
Lundi	NAM	Lundi
05	NUM	@card@
février	NOM	février
2007	NUM	@card@
à	PRP	à
19:47:30	NUM	@card@
Qu'	NOM	Qu'
'entend	VER:pres	'entend
tu	PRO:PER	tu
par	PRP	par
compatible	ADJ	compatible
Exel	NAM	Exel
et	KON	et
Word	NAM	Word
?	SENT	?
Re	NAM	Re
:	PUN	:
Cours	NOM	cour|cours
Delphi	NAM	Delphi
2	NUM	@card@
:	PUN	:
Initiation	NOM	initiation
à	PRP	à
la	DET:ART	le
programmation	NOM	programmation
avec	PRP	avec
Delphi	NAM	Delphi
par	PRP	par
Anonyme	NAM	Anonyme
le	DET:ART	le
Vendredi	NOM	vendredi
16	NUM	@card@
février	NOM	février
2007	NUM	@card@
à	PRP	à
18:59:13Re	NOM	18:59:13Re
:	PUN	:
Cours	NOM	cour|cours
Delphi	NAM	Delphi
2	NUM	@card@
:	PUN	:
Initiation	NOM	initiation
à	PRP	à
la	DET:ART	le
programmation	NOM	programmation
avec	PRP	avec
Delphi	NAM	Delphi
par	PRP	par
Anonyme	NAM	Anonyme
le	DET:ART	le
Dimanche	NAM	Dimanche
25	NUM	@card@
février	NOM	février
2007	NUM	@card@
à	PRP	à
07:35:07	NUM	@card@
Re	NOM	Re
:	PUN	:
Cours	NOM	cour|cours
Delphi	NAM	Delphi
2	NUM	@card@
:	PUN	:
Initiation	NOM	initiation
à	PRP	à
la	DET:ART	le
programmation	NOM	programmation
avec	PRP	avec
Delphi	NAM	Delphi
(	PUN	(
Score	NAM	Score
:	PUN	:
0)par	NOM	0)par
Anonyme	NAM	Anonyme
le	DET:ART	le
Dimanche	NAM	Dimanche
25	NUM	@card@
février	NOM	février
2007	NUM	@card@
à	PRP	à
13:28:16	NUM	@card@
C'	ADJ	C'
'ests	NOM	'ests
ur	VER:subi	ur
que	KON	que
pour	PRP	pour
un	DET:ART	un
utilisateur	ADJ	utilisateur
lambda	NOM	lambda
qui	PRO:REL	qui
ne	ADV	ne
veut	VER:pres	vouloir
pas	ADV	pas
trop	ADV	trop
se	PRO:PER	se
prendre	VER:infi	prendre
la	DET:ART	le
tete	NOM	tete
,	PUN	,
il	PRO:PER	il
vaut	VER:pres	valoir
mieux	ADV	mieux
utiliser	VER:infi	utiliser
directement	ADV	directement
Excel	NAM	Excel
.	SENT	.
Re	NAM	Re
:	PUN	:
Cours	NOM	cour|cours
Delphi	NAM	Delphi
2	NUM	@card@
:	PUN	:
Initiation	NOM	initiation
à	PRP	à
la	DET:ART	le
programmation	NOM	programmation
avec	PRP	avec
Delphi	NAM	Delphi
(	PUN	(
Score	NAM	Score
:	PUN	:
0)par	NOM	0)par
Anonyme	NAM	Anonyme
le	DET:ART	le
Jeudi	NAM	Jeudi
22	NUM	@card@
mars	NOM	mars
2007	NUM	@card@
à	PRP	à
10:51:45	NUM	@card@
cours	NOM	cour|cours
delphi	NOM	delphi
Re	NAM	Re
:	PUN	:
Cours	NOM	cour|cours
Delphi	NAM	Delphi
2	NUM	@card@
:	PUN	:
Initiation	NOM	initiation
à	PRP	à
la	DET:ART	le
programmation	NOM	programmation
avec	PRP	avec
Delphi	NAM	Delphi
(	PUN	(
Score	NAM	Score
:	PUN	:
0)par	NOM	0)par
Anonyme	NAM	Anonyme
le	DET:ART	le
Lundi	NAM	Lundi
28	NUM	@card@
mai	NOM	mai
2007	NUM	@card@
à	PRP	à
13:34:17	NUM	@card@
trés	NOM	trés
bonne	ADJ	bon
méthode	NOM	méthode
d'	PRP	de
'explication	NOM	'explication
.	SENT	.
Pour	PRP	pour
un	DET:ART	un
débutant	VER:ppre	débuter
comme	KON	comme
moi	PRO:PER	moi
,	PUN	,
j'	PRO:PER	je
'ai	VER:simp	'ai
pu	VER:pper	pouvoir
comprendre	VER:infi	comprendre
beaucoup	ADV	beaucoup
de	PRP	de
chose	NOM	chose
de	PRP	de
ce	PRO:DEM	ce
cours	NOM	cour|cours
et	KON	et
j'	PRO:PER	je
'ai	VER:simp	'ai
testé	VER:pper	tester
quelques	PRO:IND	quelque
progrmmes	NOM	progrmmes
et	KON	et
ça	PRO:DEM	cela
marche	NOM	marche
.	SENT	.
j'	PRO:PER	je
'attends	VER:pres	'attends
avec	PRP	avec
impatience	NOM	impatience
la	DET:ART	le
suite	NOM	suite
et	KON	et
bravo	INT	bravo
.	SENT	.
Re	NAM	Re
:	PUN	:
Cours	NOM	cour|cours
Delphi	NAM	Delphi
2	NUM	@card@
:	PUN	:
Initiation	NOM	initiation
à	PRP	à
la	DET:ART	le
programmation	NOM	programmation
avec	PRP	avec
Delphi	NAM	Delphi
(	PUN	(
Score	NAM	Score
:	PUN	:
0)par	NOM	0)par
Anonyme	NAM	Anonyme
le	DET:ART	le
Jeudi	NAM	Jeudi
04	NUM	@card@
octobre	NOM	octobre
2007	NUM	@card@
à	PRP	à
00:21:59	NUM	@card@
merci	NOM	merci
pour	PRP	pour
le	DET:ART	le
cours	NOM	cour|cours
ca	VER:futu	ca
m	VER:pper	m
a	VER:pres	avoir
bien	ADV	bien
aider	VER:infi	aider
je	PRO:PER	je
te	PRO:PER	te
souhaite	VER:pres	souhaiter
bonne	ADJ	bon
courage	NOM	courage
dans	PRP	dans
ton	DET:POS	ton
initiative	NOM	initiative
Liens	NAM	Liens
connexes	ADJ	connexe
·	NOM	·
Plus	NOM	Plus
à	PRP	à
propos	NOM	propos
de	PRP	de
Programmation	NOM	programmation
Delphi·	ABR	Delphi·
Nouvelles	NAM	Nouvelles
transmises	VER:pper	transmettre
par	PRP	par
zmasterL'article	NOM	zmasterL'article
le	DET:ART	le
plus	ADV	plus
lu	VER:pper	lire
à	PRP	à
propos	NOM	propos
de	PRP	de
Programmation	NAM	Programmation
Delphi	NAM	Delphi
:	PUN	:
Cours	NOM	cour|cours
Delphi	NAM	Delphi
2	NUM	@card@
:	PUN	:
Initiation	NOM	initiation
à	PRP	à
la	DET:ART	le
programmation	NOM	programmation
avec	PRP	avec
Delphi	NAM	Delphi
Estimer	NAM	Estimer
cet	PRO:DEM	ce
Article	NAM	Article
Score	NAM	Score
Moyen	NAM	Moyen
:	PUN	:
4.14Votes	NOM	4.14Votes
:	PUN	:
14Merci	VER:pper	14Merci
de	PRP	de
prendre	VER:infi	prendre
une	DET:ART	un
seconde	NUM	second
et	KON	et
de	PRP	de
voter	VER:infi	voter
pour	PRP	pour
cet	PRO:DEM	ce
article	NOM	article
:	PUN	:
Options	NOM	option
Format	NAM	Format
imprimable	ADJ	imprimable
Format	NAM	Format
PDF	NAM	PDF
Envoyer	NAM	Envoyer
cet	PRO:DEM	ce
article	NOM	article
à	PRP	à
un(e	NOM	un(e
)	PUN	)
ami(e	ADJ	ami(e
)	PUN	)
News	NAM	News
©	VER:simp	©
audit	NOM	audit
et	KON	et
mesure	NOM	mesure
d'	PRP	de
audience	NOM	audience
visiteurs	NOM	visiteur
internet	NOM	Internet
par	PRP	par
Conditions	NOM	condition
d'	PRP	de
utilisation	NOM	utilisation
Tous	VER:pres	Tous
les	DET:ART	le
logos	NOM	logo|logos
et	KON	et
marques	NOM	marque
sont	VER:pres	être
des	PRP:det	du
Propriétés	NOM	propriété
respectives	ADJ	respectif
.	SENT	.
Les	DET:ART	le
commentaires	NOM	commentaire
sont	VER:pres	être
la	DET:ART	le
propriété	NOM	propriété
respective	ADJ	respectif
de	PRP	de
ceux	PRO:DEM	celui
qui	PRO:REL	qui
les	PRO:PER	la|le
postent	VER:pres	poster
,	PUN	,
tout	PRO:IND	tout
le	DET:ART	le
reste	NOM	reste
©	VER:futu	©
2006-2011	NUM	@card@
est	VER:pres	être
personnel	ADJ	personnel
.	SENT	.
Tous	PRO:IND	tout
droits	NOM	droit
réservés	ADJ	réservé
.	SENT	.
PHP-MaXiMuS	NAM	PHP-MaXiMuS
est	VER:pres	être
un	DET:ART	un
logiciel	NOM	logiciel
libre	ADJ	libre
en	PRP	en
version	NOM	version
GNU/GPL	ADJ	GNU/GPL
license	ADJ	license
.	SENT	.
Copyright	NOM	copyright
2005	NUM	@card@
PHP-MaXiMuS	NOM	PHP-MaXiMuS
.	SENT	.
[	PUN	[
Page	NOM	page
générée	VER:pper	générer
en	PRP	en
0.3064	NUM	@card@
sec	ADJ	sec
]	PUN	]
[	PUN	[
(	PUN	(
PHP	NAM	PHP
:	PUN	:
76	NUM	@card@
%	SYM	%
-	PUN	-
SQL	NAM	SQL
:	PUN	:
24	NUM	@card@
%	SYM	%
)	PUN	)
]	PUN	]
[	PUN	[
Requêtes	NAM	Requêtes
SQL	NAM	SQL
:	PUN	:
77	NUM	@card@
]	PUN	]
[	PUN	[
161	NUM	@card@
pages	NOM	page
vues	VER:pper	voir
la	DET:ART	le
dernière	ADJ	dernier
heure	NOM	heure
]	PUN	]
